import {
  require_jsx_runtime
} from "./chunk-DLWX4ATB.js";
import {
  require_react
} from "./chunk-NWEMTEYF.js";
import {
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/.pnpm/@paper-design+shaders-react@0.0.29/node_modules/@paper-design/shaders-react/dist/index.js
var import_react = __toESM(require_react());

// node_modules/.pnpm/@paper-design+shaders@0.0.26/node_modules/@paper-design/shaders/dist/index.js
var ShaderMount = class {
  // set by constructor
  constructor(mountToDiv, fragmentShader, uniforms = {}, webGlContextAttributes, speed = 0, frame = 0, maxResolution = 1920) {
    __publicField(this, "mountToDiv");
    __publicField(this, "canvas");
    __publicField(this, "gl");
    __publicField(this, "program", null);
    __publicField(this, "uniformLocations", {});
    /** The fragment shader that we are using */
    __publicField(this, "fragmentShader");
    /** Stores the RAF for the render loop */
    __publicField(this, "rafId", null);
    /** Time of the last rendered frame */
    __publicField(this, "lastRenderTime", 0);
    /** Total time that we have played any animation, passed as a uniform to the shader for time-based VFX */
    __publicField(this, "totalFrameTime", 0);
    /** The current speed that we progress through animation time (multiplies by delta time every update). Allows negatives to play in reverse. If set to 0, rAF will stop entirely so static shaders have no recurring performance costs */
    __publicField(this, "speed", 0);
    /** Uniforms that are provided by the user for the specific shader being mounted (not including uniforms that this Mount adds, like time and resolution) */
    __publicField(this, "providedUniforms");
    /** Just a sanity check to make sure frames don't run after we're disposed */
    __publicField(this, "hasBeenDisposed", false);
    /** If the resolution of the canvas has changed since the last render */
    __publicField(this, "resolutionChanged", true);
    /** Store textures that are provided by the user */
    __publicField(this, "textures", /* @__PURE__ */ new Map());
    /** The maximum resolution (on the larger axis) that we render for the shader, to protect against insane resolutions and bad performance. Actual CSS size of the canvas can be larger, it will just lose quality after this */
    __publicField(this, "maxResolution", 0);
    __publicField(this, "initProgram", () => {
      const program = createProgram(this.gl, vertexShaderSource, this.fragmentShader);
      if (!program) return;
      this.program = program;
    });
    __publicField(this, "setupPositionAttribute", () => {
      const positionAttributeLocation = this.gl.getAttribLocation(this.program, "a_position");
      const positionBuffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);
      const positions = [-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1];
      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);
      this.gl.enableVertexAttribArray(positionAttributeLocation);
      this.gl.vertexAttribPointer(positionAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);
    });
    __publicField(this, "setupUniforms", () => {
      const uniformLocations = {
        u_time: this.gl.getUniformLocation(this.program, "u_time"),
        u_pixelRatio: this.gl.getUniformLocation(this.program, "u_pixelRatio"),
        u_resolution: this.gl.getUniformLocation(this.program, "u_resolution")
      };
      Object.entries(this.providedUniforms).forEach(([key, value]) => {
        uniformLocations[key] = this.gl.getUniformLocation(this.program, key);
        if (value instanceof HTMLImageElement) {
          const aspectRatioUniformName = `${key}_aspect_ratio`;
          uniformLocations[aspectRatioUniformName] = this.gl.getUniformLocation(this.program, aspectRatioUniformName);
        }
      });
      this.uniformLocations = uniformLocations;
    });
    __publicField(this, "resizeObserver", null);
    __publicField(this, "setupResizeObserver", () => {
      this.resizeObserver = new ResizeObserver(() => this.handleResize());
      this.resizeObserver.observe(this.mountToDiv);
      this.handleResize();
    });
    /** The scale that we should render at (prevents the virtual resolution from going beyond our maxium and then multiplies by pixelRatio (at least 2X rendering always) */
    __publicField(this, "renderScale", 1);
    /** Resize handler for when the container div changes size and we want to resize our canvas to match */
    __publicField(this, "handleResize", () => {
      const clientWidth = this.mountToDiv.clientWidth;
      const clientHeight = this.mountToDiv.clientHeight;
      const maxResolution = this.maxResolution;
      const pixelRatio = Math.max(2, window.devicePixelRatio);
      this.renderScale = Math.min(1, maxResolution / Math.max(clientWidth, clientHeight)) * pixelRatio;
      let newWidth = clientWidth * this.renderScale;
      let newHeight = clientHeight * this.renderScale;
      if (this.canvas.width !== newWidth || this.canvas.height !== newHeight) {
        this.canvas.width = newWidth;
        this.canvas.height = newHeight;
        this.resolutionChanged = true;
        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);
        this.render(performance.now());
      }
    });
    __publicField(this, "render", (currentTime) => {
      if (this.hasBeenDisposed) return;
      if (this.program === null) {
        console.warn("Tried to render before program or gl was initialized");
        return;
      }
      const dt = currentTime - this.lastRenderTime;
      this.lastRenderTime = currentTime;
      if (this.speed !== 0) {
        this.totalFrameTime += dt * this.speed;
      }
      this.gl.clear(this.gl.COLOR_BUFFER_BIT);
      this.gl.useProgram(this.program);
      this.gl.uniform1f(this.uniformLocations.u_time, this.totalFrameTime * 1e-3);
      if (this.resolutionChanged) {
        this.gl.uniform2f(this.uniformLocations.u_resolution, this.gl.canvas.width, this.gl.canvas.height);
        this.gl.uniform1f(this.uniformLocations.u_pixelRatio, this.renderScale);
        this.resolutionChanged = false;
      }
      this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
      if (this.speed !== 0) {
        this.requestRender();
      } else {
        this.rafId = null;
      }
    });
    __publicField(this, "requestRender", () => {
      if (this.rafId !== null) {
        cancelAnimationFrame(this.rafId);
      }
      this.rafId = requestAnimationFrame(this.render);
    });
    /** Creates a texture from an image and sets it into a uniform value */
    __publicField(this, "setTextureUniform", (uniformName, image) => {
      if (!image.complete || image.naturalWidth === 0) {
        throw new Error(`Image for uniform ${uniformName} must be fully loaded`);
      }
      const existingTexture = this.textures.get(uniformName);
      if (existingTexture) {
        this.gl.deleteTexture(existingTexture);
      }
      const texture = this.gl.createTexture();
      this.gl.bindTexture(this.gl.TEXTURE_2D, texture);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
      this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);
      const error = this.gl.getError();
      if (error !== this.gl.NO_ERROR || texture === null) {
        console.error("WebGL error when uploading texture:", error);
        return;
      }
      this.textures.set(uniformName, texture);
      const location = this.uniformLocations[uniformName];
      if (location) {
        const textureUnit = this.textures.size - 1;
        this.gl.useProgram(this.program);
        this.gl.activeTexture(this.gl.TEXTURE0 + textureUnit);
        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);
        this.gl.uniform1i(location, textureUnit);
        const aspectRatioUniformName = `${uniformName}_aspect_ratio`;
        const aspectRatioLocation = this.uniformLocations[aspectRatioUniformName];
        if (aspectRatioLocation) {
          const aspectRatio = image.naturalWidth / image.naturalHeight;
          this.gl.uniform1f(aspectRatioLocation, aspectRatio);
        }
      }
    });
    /** Sets the provided uniform values into the WebGL program, can be a partial list of uniforms that have changed */
    __publicField(this, "setUniformValues", (updatedUniforms) => {
      this.gl.useProgram(this.program);
      Object.entries(updatedUniforms).forEach(([key, value]) => {
        const location = this.uniformLocations[key];
        if (!location) {
          console.warn(`Uniform location for ${key} not found`);
          return;
        }
        if (value instanceof HTMLImageElement) {
          this.setTextureUniform(key, value);
        } else if (Array.isArray(value)) {
          switch (value.length) {
            case 2:
              this.gl.uniform2fv(location, value);
              break;
            case 3:
              this.gl.uniform3fv(location, value);
              break;
            case 4:
              this.gl.uniform4fv(location, value);
              break;
            default:
              if (value.length === 9) {
                this.gl.uniformMatrix3fv(location, false, value);
              } else if (value.length === 16) {
                this.gl.uniformMatrix4fv(location, false, value);
              } else {
                console.warn(`Unsupported uniform array length: ${value.length}`);
              }
          }
        } else if (typeof value === "number") {
          this.gl.uniform1f(location, value);
        } else if (typeof value === "boolean") {
          this.gl.uniform1i(location, value ? 1 : 0);
        } else {
          console.warn(`Unsupported uniform type for ${key}: ${typeof value}`);
        }
      });
    });
    /** Gets the current total animation time from 0ms */
    __publicField(this, "getCurrentFrameTime", () => {
      return this.totalFrameTime;
    });
    /** Set a frame to get a deterministic result, frames are literally just milliseconds from zero since the animation started */
    __publicField(this, "setFrame", (newFrame) => {
      this.totalFrameTime = newFrame;
      this.lastRenderTime = performance.now();
      this.render(performance.now());
    });
    /** Set an animation speed (or 0 to stop animation) */
    __publicField(this, "setSpeed", (newSpeed = 1) => {
      this.speed = newSpeed;
      if (this.rafId === null && newSpeed !== 0) {
        this.lastRenderTime = performance.now();
        this.rafId = requestAnimationFrame(this.render);
      }
      if (this.rafId !== null && newSpeed === 0) {
        cancelAnimationFrame(this.rafId);
        this.rafId = null;
      }
    });
    /** Update the uniforms that are provided by the outside shader, can be a partial set with only the uniforms that have changed */
    __publicField(this, "setUniforms", (newUniforms) => {
      this.providedUniforms = { ...this.providedUniforms, ...newUniforms };
      this.setUniformValues(newUniforms);
      this.render(performance.now());
    });
    /** Dispose of the shader mount, cleaning up all of the WebGL resources */
    __publicField(this, "dispose", () => {
      this.hasBeenDisposed = true;
      if (this.rafId !== null) {
        cancelAnimationFrame(this.rafId);
        this.rafId = null;
      }
      if (this.gl && this.program) {
        this.textures.forEach((texture) => {
          this.gl.deleteTexture(texture);
        });
        this.textures.clear();
        this.gl.deleteProgram(this.program);
        this.program = null;
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
        this.gl.getError();
      }
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
        this.resizeObserver = null;
      }
      this.uniformLocations = {};
      this.mountToDiv.paperShaderMount = void 0;
    });
    const canvas = document.createElement("canvas");
    mountToDiv.style.contain = "strict";
    mountToDiv.style.position = "relative";
    canvas.style.position = "absolute";
    canvas.style.inset = "0";
    canvas.style.zIndex = "-1";
    canvas.style.width = "100%";
    canvas.style.height = "100%";
    this.canvas = canvas;
    this.mountToDiv = mountToDiv;
    mountToDiv.appendChild(canvas);
    this.fragmentShader = fragmentShader;
    this.providedUniforms = uniforms;
    this.totalFrameTime = frame;
    this.maxResolution = maxResolution;
    const gl = canvas.getContext("webgl2", webGlContextAttributes);
    if (!gl) {
      throw new Error("WebGL not supported");
    }
    this.gl = gl;
    this.initProgram();
    this.setupPositionAttribute();
    this.setupUniforms();
    this.setUniformValues(this.providedUniforms);
    this.setupResizeObserver();
    this.setSpeed(speed);
    this.canvas.setAttribute("data-paper-shaders", "true");
    this.mountToDiv.paperShaderMount = this;
  }
};
var vertexShaderSource = `#version 300 es
layout(location = 0) in vec4 a_position;

void main() {
  gl_Position = a_position;
}
`;
function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  if (!shader) return null;
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error("An error occurred compiling the shaders: " + gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}
function createProgram(gl, vertexShaderSource2, fragmentShaderSource) {
  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource2);
  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
  if (!vertexShader || !fragmentShader) return null;
  const program = gl.createProgram();
  if (!program) return null;
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error("Unable to initialize the shader program: " + gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
    return null;
  }
  gl.detachShader(program, vertexShader);
  gl.detachShader(program, fragmentShader);
  gl.deleteShader(vertexShader);
  gl.deleteShader(fragmentShader);
  return program;
}
var meshGradientFragmentShader = `#version 300 es
precision highp float;

uniform float u_pixelRatio;
uniform vec2 u_resolution;
uniform float u_time;

uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;
uniform vec4 u_color4;

out vec4 fragColor;

#define S(a,b,t) smoothstep(a,b,t)

mat2 Rot(float a) {
    float s = sin(a);
    float c = cos(a);
    return mat2(c, -s, s, c);
}

vec2 hash(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}

float noise( in vec2 p ) {
    vec2 i = floor( p );
    vec2 f = fract( p );
    vec2 u = f*f*(3.0-2.0*f);

    float n = mix( mix( dot( -1.0+2.0*hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                        dot( -1.0+2.0*hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                   mix( dot( -1.0+2.0*hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                        dot( -1.0+2.0*hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
    return 0.5 + 0.5*n;
}


void main() {
    vec2 uv = gl_FragCoord.xy / u_resolution.xy;
    float ratio = u_resolution.x / u_resolution.y;
    
    uv /= u_pixelRatio;
    
    vec2 tuv = uv;
    tuv -= .5;

    // rotate with Noise
    float degree = noise(vec2(u_time, tuv.x * tuv.y));

    tuv.y *= 1./ratio;
    tuv *= Rot(radians((degree-.5)*720.+180.));
    tuv.y *= ratio;


    // Wave warp with sin
    float frequency = 5.;
    float amplitude = 30.;
    float speed = u_time * 2.;
    tuv.x += sin(tuv.y*frequency+speed)/amplitude;
    tuv.y += sin(tuv.x*frequency*1.5+speed)/(amplitude*.5);


    float proportion_1 = S(-.3, .2, (tuv*Rot(radians(-5.))).x);
    vec3 layer1_color = mix(u_color1.rgb * u_color1.a, u_color2.rgb * u_color2.a, proportion_1);
    float layer1_opacity = mix(u_color1.a, u_color2.a, proportion_1);
    vec3 layer2_color = mix(u_color3.rgb * u_color3.a, u_color4.rgb * u_color4.a, proportion_1);
    float layer2_opacity = mix(u_color3.a, u_color4.a, proportion_1);

    float proportion_2 = S(.5, -.3, tuv.y);
    vec3 color = mix(layer1_color, layer2_color, proportion_2);
    float opacity = mix(layer1_opacity, layer2_opacity, proportion_2);
    
    fragColor = vec4(color, opacity);
}
`;
var smokeRingFragmentShader = `#version 300 es
precision highp float;

uniform float u_pixelRatio;
uniform vec2 u_resolution;
uniform float u_time;

uniform float u_scale;

uniform vec4 u_colorInner;
uniform vec4 u_colorOuter;
uniform float u_noiseScale;
uniform float u_thickness;

out vec4 fragColor;

#define TWO_PI 6.28318530718
#define PI 3.14159265358979323846

float random(in vec2 st) {
  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}
float noise(vec2 st) {
  vec2 i = floor(st);
  vec2 f = fract(st);
  float a = random(i);
  float b = random(i + vec2(1.0, 0.0));
  float c = random(i + vec2(0.0, 1.0));
  float d = random(i + vec2(1.0, 1.0));

  // Smoothstep for interpolation
  vec2 u = f * f * (3.0 - 2.0 * f);

  // Do the interpolation as two nested mix operations
  // If you try to do this in one big operation, there's enough precision loss to be off by 1px at cell boundaries
  float x1 = mix(a, b, u.x);
  float x2 = mix(c, d, u.x);
  return mix(x1, x2, u.y);

}
float fbm(in vec2 n) {
  float total = 0.0, amplitude = .4;
  for (int i = 0; i < 12; i++) {
    total += noise(n) * amplitude;
    n += n;
    amplitude *= 0.6;
  }
  return total;
}

float get_ring_shape(vec2 uv, float innerRadius, float outerRadius) {
  float distance = length(uv);
  float line_width = outerRadius - innerRadius;
  float ringValue = smoothstep(innerRadius, innerRadius + .8 * line_width, distance);
  ringValue -= smoothstep(outerRadius, outerRadius + 1.2 * line_width, distance);
  return clamp(ringValue, 0., 1.);
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  float ratio = u_resolution.x / u_resolution.y;

  uv -= .5;
  float scale = .5 * u_scale + 1e-4;
  uv *= (1. - step(1. - scale, 1.) / scale);
  uv *= 1.5;
  uv.x *= ratio;

  float t = u_time;

  float atg = atan(uv.y, uv.x);
  float angle = (atg + PI) / TWO_PI;

  vec2 polar_uv = vec2(atg, .1 * t - (.5 * length(uv)) + 1. / pow(length(uv), .5));
  polar_uv *= u_noiseScale;

  float noise_left = fbm(polar_uv + mod(.05 * t, 35.));
  polar_uv.x = mod(polar_uv.x, u_noiseScale * TWO_PI);
  float noise_right = fbm(polar_uv + mod(.05 * t, 35.));
  float noise = mix(noise_right, noise_left, smoothstep(-.2, .2, uv.x));

  float center_shape = 1. - pow(smoothstep(2., .0, length(uv)), 50.);

  float radius = .4 - .25 * u_thickness;
  float thickness = u_thickness;
  thickness = pow(thickness, 2.);

  float ring_shape = get_ring_shape(uv * (.5 + .6 * noise), radius - .2 * thickness, radius + .5 * thickness);

  float ring_shape_outer = 1. - pow(ring_shape, 7.);
  ring_shape_outer *= ring_shape;

  float ring_shape_inner = ring_shape - ring_shape_outer;
  ring_shape_inner *= ring_shape;

  float opacity = ring_shape_inner * u_colorInner.a;
  opacity += ring_shape_outer * u_colorOuter.a;

  vec3 color = u_colorOuter.rgb * ring_shape_outer * u_colorOuter.a;
  color += u_colorInner.rgb * ring_shape_inner * u_colorInner.a;

  fragColor = vec4(color, opacity);
}
`;
var neuroNoiseFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform vec4 u_colorFront;
uniform vec4 u_colorBack;
uniform float u_brightness;

out vec4 fragColor;

vec2 rotate(vec2 uv, float th) {
  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

float neuro_shape(vec2 uv, float t) {
  vec2 sine_acc = vec2(0.);
  vec2 res = vec2(0.);
  float scale = 8.;

  for (int j = 0; j < 15; j++) {
    uv = rotate(uv, 1.);
    sine_acc = rotate(sine_acc, 1.);
    vec2 layer = uv * scale + float(j) + sine_acc - t;
    sine_acc += sin(layer);
    res += (.5 + .5 * cos(layer)) / scale;
    scale *= (1.2);
  }
  return res.x + res.y;
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;

  uv -= .5;
  float scale = .5 * u_scale + 1e-4;
  uv *= (.001 * (1. - step(1. - scale, 1.) / scale));
  uv *= u_resolution;
  uv /= u_pixelRatio;
  uv += .5;

  float t = u_time;

  float noise = neuro_shape(uv, t);

  noise = u_brightness * pow(noise, 3.);
  noise += pow(noise, 12.);
  noise = max(.0, noise - .5);

  vec3 color = mix(u_colorBack.rgb * u_colorBack.a, u_colorFront.rgb * u_colorFront.a, noise);
  float opacity = mix(u_colorBack.a, u_colorFront.a, noise);

  fragColor = vec4(color, opacity);
}
`;
var dotOrbitFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;
uniform vec4 u_color4;
uniform float u_dotSize;
uniform float u_dotSizeRange;
uniform float u_spreading;

out vec4 fragColor;

#define TWO_PI 6.28318530718

float random(in vec2 st) {
  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}
vec2 random2(vec2 p) {
  return vec2(random(p), random(200. * p));
}

vec3 get_voronoi_shape(vec2 _uv, float time) {
  vec2 i_uv = floor(_uv);
  vec2 f_uv = fract(_uv);

  float min_dist = 1.;
  vec2 cell_randomizer = vec2(0.);
  for (int y = -1; y <= 1; y++) {
    for (int x = -1; x <= 1; x++) {
      vec2 tile_offset = vec2(float(x), float(y));
      vec2 rand = random2(i_uv + tile_offset);
      vec2 cell_center = .5 + 1e-4 + .25 * clamp(u_spreading, 0., 1.) * sin(time + TWO_PI * rand);
      float dist = length(tile_offset + cell_center - f_uv);
      if (dist < min_dist) {
        min_dist = dist;
        cell_randomizer = rand;
      }
      min_dist = min(min_dist, dist);
    }
  }

  return vec3(min_dist, cell_randomizer);
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;

  uv -= .5;
  float scale = .5 * u_scale + 1e-4;
  uv *= (.02 * (1. - step(1. - scale, 1.) / scale));
  uv *= u_resolution;
  uv /= u_pixelRatio;
  uv += .5;

  float t = u_time;

  vec3 voronoi = get_voronoi_shape(uv, t) + 1e-4;

  float radius = .25 * clamp(u_dotSize, 0., 1.) - .5 * clamp(u_dotSizeRange, 0., 1.) * voronoi[2];
  float dist = voronoi[0];
  float edge_width = fwidth(dist);
  float shape = smoothstep(radius + edge_width, radius - edge_width, dist);

  float color_randomizer = voronoi[1];

  float opacity =
    u_color1.a * step(0.0, color_randomizer) * step(color_randomizer, 0.25) +
    u_color2.a * step(0.25, color_randomizer) * step(color_randomizer, 0.5) +
    u_color3.a * step(0.5, color_randomizer) * step(color_randomizer, 0.75) +
    u_color4.a * step(0.75, color_randomizer) * step(color_randomizer, 1.0);

  opacity *= shape;

  vec3 color =
    u_color1.rgb * step(0.0, color_randomizer) * step(color_randomizer, 0.25) +
    u_color2.rgb * step(0.25, color_randomizer) * step(color_randomizer, 0.5) +
    u_color3.rgb * step(0.5, color_randomizer) * step(color_randomizer, 0.75) +
    u_color4.rgb * step(0.75, color_randomizer) * step(color_randomizer, 1.0);

  fragColor = vec4(color * opacity, opacity);
}
`;
var DotGridShapes = {
  Circle: 0,
  Diamond: 1,
  Square: 2,
  Triangle: 3
};
var dotGridFragmentShader = `#version 300 es
precision highp float;

uniform vec2 u_resolution;
uniform float u_pixelRatio;

uniform vec4 u_colorFill;
uniform vec4 u_colorStroke;
uniform float u_dotSize;
uniform float u_gridSpacingX;
uniform float u_gridSpacingY;
uniform float u_strokeWidth;
uniform float u_sizeRange;
uniform float u_opacityRange;
uniform float u_shape;

out vec4 fragColor;

#define TWO_PI 6.28318530718
#define PI 3.14159265358979323846

float hash(vec2 st) {
  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

vec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }

float snoise(vec2 v) {
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
    -0.577350269189626, 0.024390243902439);
  vec2 i = floor(v + dot(v, C.yy));
  vec2 x0 = v - i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))
    + i.x + vec3(0.0, i1.x, 1.0));
  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),
      dot(x12.zw, x12.zw)), 0.0);
  m = m * m;
  m = m * m;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
  vec3 g;
  g.x = a0.x * x0.x + h.x * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
float polygon(vec2 p, float N, float rot) {
  float a = atan(p.x, p.y) + rot;
  float r = TWO_PI / float(N);

  return cos(floor(.5 + a / r) * r - a) * length(p);
}

void main() {
  vec2 uv = gl_FragCoord.xy;
  uv.y = u_resolution.y - uv.y;

  uv /= u_pixelRatio;

  vec2 grid = fract(uv / vec2(u_gridSpacingX, u_gridSpacingY)) + 1e-4;
  vec2 grid_idx = floor(uv / vec2(u_gridSpacingX, u_gridSpacingY));
  float sizeRandomizer = .5 + .8 * snoise(2. * vec2(grid_idx.x * 100., grid_idx.y));
  float opacity_randomizer = .5 + .7 * snoise(2. * vec2(grid_idx.y, grid_idx.x));

  vec2 center = vec2(0.5) - 1e-3;
  vec2 p = (grid - center) * vec2(u_gridSpacingX, u_gridSpacingY);

  float baseSize = u_dotSize * (1. - sizeRandomizer * u_sizeRange);
  float strokeWidth = u_strokeWidth;

  float dist;
  if (u_shape < 0.5) {
    // Circle
    dist = length(p);
  } else if (u_shape < 1.5) {
    // Diamond
    strokeWidth *= 1.5;
    dist = polygon(1.5 * p, 4., .25 * PI);
  } else if (u_shape < 2.5) {
    // Square
    dist = polygon(1.03 * p, 4., 1e-3);
  } else {
    // Triangle
    strokeWidth *= 1.5;
    p = p * 2. - 1.;
    p *= .9;
    p.y -= .75 * baseSize;
    dist = polygon(p, 3., 1e-3);
  }

  float edgeWidth = fwidth(dist);
  float shapeOuter = smoothstep(baseSize + edgeWidth + strokeWidth, baseSize - edgeWidth + strokeWidth, dist);
  float shapeInner = smoothstep(baseSize + edgeWidth, baseSize - edgeWidth, dist);
  float stroke = clamp(shapeOuter - shapeInner, 0., 1.);

  float dot_opacity = max(0., 1. - opacity_randomizer * u_opacityRange);

  vec3 color = u_colorFill.rgb * u_colorFill.a * dot_opacity * shapeInner;
  color = mix(color, u_colorStroke.rgb, u_colorStroke.a * dot_opacity * stroke);

  float opacity = u_colorFill.a * shapeInner * dot_opacity;
  opacity += u_colorStroke.a * stroke * dot_opacity;

  fragColor = vec4(color, opacity);
}
`;
var steppedSimplexNoiseFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;

uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;
uniform vec4 u_color4;
uniform vec4 u_color5;
uniform float u_steps_number;

out vec4 fragColor;

vec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }
float snoise(vec2 v) {
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
    -0.577350269189626, 0.024390243902439);
  vec2 i = floor(v + dot(v, C.yy));
  vec2 x0 = v - i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))
    + i.x + vec3(0.0, i1.x, 1.0));
  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),
      dot(x12.zw, x12.zw)), 0.0);
  m = m * m;
  m = m * m;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
  vec3 g;
  g.x = a0.x * x0.x + h.x * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float get_noise(vec2 uv, float t) {
  float noise = .5 * snoise(uv - vec2(0., .3 * t));
  noise += .5 * snoise(2. * uv + vec2(0., .32 * t));

  return noise;
}

vec4 getColor(int index) {
  if (index == 0) return u_color1;
  if (index == 1) return u_color2;
  if (index == 2) return u_color3;
  if (index == 3) return u_color4;
  if (index == 4) return u_color5;
  return u_color1;
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;

  uv -= .5;
  float scale = .5 * u_scale + 1e-4;
  uv *= (.0008 * (1. - step(1. - scale, 1.) / scale));
  uv *= u_resolution;
  uv /= u_pixelRatio;
  uv += .5;

  float t = u_time;

  float noise = .5 + .5 * get_noise(uv, t);
  noise = floor(noise * u_steps_number) / u_steps_number;

  vec3 color = u_color1.rgb * u_color1.a;
  float opacity = u_color1.a;
  for (int i = 0; i < 5; i++) {
    vec4 next_c = getColor(i + 1);
    float proportion = smoothstep((float(i) + .5) / 5., (float(i) + 2.) / 5., noise);
    color = mix(color, next_c.rgb * next_c.a, proportion);
    opacity = mix(opacity, next_c.a, proportion);
  }
  fragColor = vec4(color, opacity);
}
`;
var metaballsFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;
uniform float u_ballSize;
uniform float u_visibilityRange;

#define TWO_PI 6.28318530718

out vec4 fragColor;

float hash(float x) {
  return fract(sin(x) * 43758.5453123);
}
float lerp(float a, float b, float t) {
  return a + t * (b - a);
}
float noise(float x) {
  float i = floor(x);
  float f = fract(x);
  float u = f * f * (3.0 - 2.0 * f); // Smoothstep function for interpolation
  return lerp(hash(i), hash(i + 1.0), u);
}

float get_ball_shape(vec2 uv, vec2 c, float p) {
  float s = .5 * length(uv - c);
  s = 1. - clamp(s, 0., 1.);
  s = pow(s, p);
  return s;
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  float ratio = u_resolution.x / u_resolution.y;

  uv -= .5;
  float scale = .5 * u_scale + 1e-4;
  uv *= (9. * (1. - step(1. - scale, 1.) / scale));
  uv += .5;
  uv.x *= ratio;

  float t = u_time;

  vec3 total_color = vec3(0.);
  float total_shape = 0.;

  const int max_balls_number = 15;
  for (int i = 0; i < max_balls_number; i++) {
    vec2 pos = vec2(.5) + 1e-4;
    float idx_fract = float(i) / float(max_balls_number);
    float angle = TWO_PI * idx_fract;

    float speed = 1. - .2 * idx_fract;
    float noiseX = noise(angle * 10. + float(i) + t * speed);
    float noiseY = noise(angle * 20. + float(i) - t * speed);

    pos += 7. * (vec2(noiseX, noiseY) - .5);

    vec4 ball_color;
    if (i % 3 == 0) {
      ball_color = u_color1;
    } else if (i % 3 == 1) {
      ball_color = u_color2;
    } else {
      ball_color = u_color3;
    }

    float shape = get_ball_shape(uv, pos, 6. - 4. * u_ballSize) * ball_color.a;

    shape *= smoothstep((float(i) - 1.) / float(max_balls_number), idx_fract, u_visibilityRange);

    total_color += ball_color.rgb * shape;
    total_shape += shape;
  }

  total_color /= max(total_shape, 1e-4);

  float edge_width = fwidth(total_shape);
  float final_shape = smoothstep(.4, .4 + edge_width, total_shape);

  vec3 color = total_color * final_shape;
  float opacity = final_shape;

  if (opacity < .01) {
    discard;
  }

  fragColor = vec4(color, opacity);
}
`;
var perlinNoiseFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform vec4 u_color;
uniform float u_proportion;
uniform float u_softness;
uniform float u_octaveCount;
uniform float u_persistence;
uniform float u_lacunarity;

out vec4 fragColor;

#define TWO_PI 6.28318530718

uint hash(uint x, uint seed) {
  const uint m = 0x5bd1e995U;
  uint hash = seed;
    // process input
    uint k = x;
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
    // some final mixing
    hash ^= hash >> 13;
    hash *= m;
    hash ^= hash >> 15;
    return hash;
}

uint hash(uvec3 x, uint seed){
    const uint m = 0x5bd1e995U;
    uint hash = seed;
    // process first vector element
    uint k = x.x; 
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
    // process second vector element
    k = x.y; 
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
    // process third vector element
    k = x.z; 
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
    // some final mixing
    hash ^= hash >> 13;
    hash *= m;
    hash ^= hash >> 15;
    return hash;
}


vec3 gradientdy(uint hash) {
    switch (int(hash) & 15) { // look at the last four bits to pick a gradient dy
    case 0:
        return vec3(1, 1, 0);
    case 1:
        return vec3(-1, 1, 0);
    case 2:
        return vec3(1, -1, 0);
    case 3:
        return vec3(-1, -1, 0);
    case 4:
        return vec3(1, 0, 1);
    case 5:
        return vec3(-1, 0, 1);
    case 6:
        return vec3(1, 0, -1);
    case 7:
        return vec3(-1, 0, -1);
    case 8:
        return vec3(0, 1, 1);
    case 9:
        return vec3(0, -1, 1);
    case 10:
        return vec3(0, 1, -1);
    case 11:
        return vec3(0, -1, -1);
    case 12:
        return vec3(1, 1, 0);
    case 13:
        return vec3(-1, 1, 0);
    case 14:
        return vec3(0, -1, 1);
    case 15:
        return vec3(0, -1, -1);
    }
}

float interpolate(float value1, float value2, float value3, float value4, float value5, float value6, float value7, float value8, vec3 t) {
    return mix(
        mix(mix(value1, value2, t.x), mix(value3, value4, t.x), t.y),
        mix(mix(value5, value6, t.x), mix(value7, value8, t.x), t.y),
        t.z
    );
}

vec3 fade(vec3 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float perlinNoise(vec3 position, uint seed) {
    position += 1e+4;
    vec3 floorPosition = floor(position);
    vec3 fractPosition = fract(position);
    uvec3 cellCoordinates = uvec3(floorPosition);
    float value1 = dot(gradientdy(hash(cellCoordinates, seed)), fractPosition);
    float value2 = dot(gradientdy(hash((cellCoordinates + uvec3(1, 0, 0)), seed)), fractPosition - vec3(1, 0, 0));
    float value3 = dot(gradientdy(hash((cellCoordinates + uvec3(0, 1, 0)), seed)), fractPosition - vec3(0, 1, 0));
    float value4 = dot(gradientdy(hash((cellCoordinates + uvec3(1, 1, 0)), seed)), fractPosition - vec3(1, 1, 0));
    float value5 = dot(gradientdy(hash((cellCoordinates + uvec3(0, 0, 1)), seed)), fractPosition - vec3(0, 0, 1));
    float value6 = dot(gradientdy(hash((cellCoordinates + uvec3(1, 0, 1)), seed)), fractPosition - vec3(1, 0, 1));
    float value7 = dot(gradientdy(hash((cellCoordinates + uvec3(0, 1, 1)), seed)), fractPosition - vec3(0, 1, 1));
    float value8 = dot(gradientdy(hash((cellCoordinates + uvec3(1, 1, 1)), seed)), fractPosition - vec3(1, 1, 1));
    return interpolate(value1, value2, value3, value4, value5, value6, value7, value8, fade(fractPosition));
}

float p_noise(vec3 position, int octaveCount, float persistence, float lacunarity) {
    float value = 0.0;
    float amplitude = 1.0;
    float currentFrequency = 10.;
    uint currentSeed = uint(0);
    for (int i = 0; i < octaveCount; i++) {
        currentSeed = hash(currentSeed, 0x0U);
        value += perlinNoise(position * currentFrequency, currentSeed) * amplitude;
        amplitude *= persistence;
        currentFrequency *= lacunarity;
    }
    return value;
}

float get_max_amp(float persistence, float octaveCount) {
    persistence *= .999;
    return (1. - pow(persistence, octaveCount)) / (1. - persistence);
}

void main() {

    vec2 uv = gl_FragCoord.xy / u_resolution.xy;
    float t = .2 * u_time;

    uv -= .5;
    uv *= (.004 * u_scale * u_resolution);
    uv /= u_pixelRatio;
    uv += .5;
        
    vec3 p = vec3(uv, t);
    
    float oct_count = max(0., floor(u_octaveCount));
    float persistence = clamp(u_persistence, 0., 1.);
    float noise = p_noise(p, int(oct_count), persistence, u_lacunarity);
    
    float max_amp = get_max_amp(persistence, oct_count);
    float noise_normalized = (noise + max_amp) / (2. * max_amp) + (u_proportion - .5);
    float sharpness = clamp(u_softness, 0., 1.);
    float smooth_w = 0.5 * fwidth(noise_normalized);
    float sharp_noise = smoothstep(
        .5 - .5 * sharpness - smooth_w, 
        .5 + .5 * sharpness + smooth_w, 
        noise_normalized
    );

    vec3 color = u_color.rgb * u_color.a * sharp_noise;
    float opacity = u_color.a * sharp_noise;

    fragColor = vec4(color, opacity);
}
`;
var voronoiFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;

uniform vec4 u_colorCell1;
uniform vec4 u_colorCell2;
uniform vec4 u_colorCell3;
uniform vec4 u_colorMid;

uniform float u_colorGradient;
uniform float u_distance;
uniform float u_edgesSize;
uniform float u_edgesSoftness;
uniform float u_middleSize;
uniform float u_middleSoftness;

#define TWO_PI 6.28318530718

out vec4 fragColor;

vec2 hash(vec2 p) {
  p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
  return fract(sin(p) * 18.5453);
}

float smin(float angle, float b, float k) {
  float h = clamp(.5 + .5 * (b - angle) / k, 0., 1.);
  return mix(b, angle, h) - k * h * (1. - h);
}

vec4 blend_colors(vec4 c1, vec4 c2, vec4 c3, vec2 randomizer) {
    vec3 color1 = c1.rgb * c1.a;
    vec3 color2 = c2.rgb * c2.a;
    vec3 color3 = c3.rgb * c3.a;

    float mixer = clamp(u_colorGradient, 0., 1.);
    float r1 = smoothstep(.5 - .5 * mixer, .5 + .5 * mixer, randomizer[0]);
    float r2 = smoothstep(.6 - .6 * mixer, .6 + .4 * mixer, randomizer[1]);
    vec3 blended_color_2 = mix(color1, color2, r1);
    float blended_opacity_2 = mix(c1.a, c2.a, r1);
    vec3 c = mix(blended_color_2, color3, r2);
    float o = mix(blended_opacity_2, c3.a, r2);
    
    return vec4(c, o);
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  float t = u_time;
  uv -= .5;
  uv *= (.01 * u_scale * u_resolution);
  uv /= u_pixelRatio;
  uv += .5;

  vec2 i_uv = floor(uv);
  vec2 f_uv = fract(uv);

  vec2 randomizer = vec2(0.);
  vec3 distance = vec3(1.);

  for (int y = -1; y <= 1; y++) {
    for (int x = -1; x <= 1; x++) {
      vec2 tile_offset = vec2(float(x), float(y));
      vec2 o = hash(i_uv + tile_offset);
      tile_offset += (.5 + clamp(u_distance, 0., .5) * sin(t + TWO_PI * o)) - f_uv;

      float dist = dot(tile_offset, tile_offset);
      float old_min_dist = distance.x;

      distance.z = max(distance.x, max(distance.y, min(distance.z, dist)));
      distance.y = max(distance.x, min(distance.y, dist));
      distance.x = min(distance.x, dist);

      if (old_min_dist > distance.x) {
        randomizer = o;
      }
    }
  }

  distance = sqrt(distance);

  distance = sqrt(distance);
  float cell_shape = min(smin(distance.z, distance.y, .1) - distance.x, 1.);

  float dot_shape = pow(distance.x, 2.) / (2. * clamp(u_middleSize, 0., 1.) + 1e-4);
  float dot_edge_width = fwidth(dot_shape);
  float dotSharp = clamp(1. - u_middleSoftness, 0., 1.);
  dot_shape = 1. - smoothstep(.5 * dotSharp - dot_edge_width, 1. - .5 * dotSharp, dot_shape);

  float cell_edge_width = fwidth(distance.x);
  float w = .7 * (clamp(u_edgesSize, 0., 1.) - .1);
  float edgeSharp = clamp(u_edgesSoftness, 0., 1.);
  cell_shape = smoothstep(w - cell_edge_width, w + edgeSharp, cell_shape);

  dot_shape *= cell_shape;

  vec4 cell_mix = blend_colors(u_colorCell1, u_colorCell2, u_colorCell3, randomizer);
  
  vec3 color = cell_mix.rgb * cell_shape;
  float opacity = cell_mix.a * cell_shape;

  color = mix(color, u_colorMid.rgb * u_colorMid.a, dot_shape);
  opacity = mix(opacity, u_colorMid.a, dot_shape);

  fragColor = vec4(color, opacity);
}
`;
var wavesFragmentShader = `#version 300 es
precision highp float;

uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform float u_rotation;

uniform vec4 u_color;
uniform float u_shape;
uniform float u_frequency;
uniform float u_amplitude;
uniform float u_spacing;
uniform float u_dutyCycle;
uniform float u_softness;

#define TWO_PI 6.28318530718
#define PI 3.14159265358979323846

out vec4 fragColor;

vec2 rotate(vec2 uv, float th) {
  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;

  uv -= .5;
  uv *= (.02 * max(0., u_scale) * u_resolution);
  uv = rotate(uv, u_rotation * .5 * PI);
  uv /= u_pixelRatio;
  uv += .5;

  float wave = .5 * cos(uv.x * u_frequency * TWO_PI);
  float zigzag = 2. * abs(fract(uv.x * u_frequency) - .5);
  float irregular = sin(uv.x * .25 * u_frequency * TWO_PI) * cos(uv.x * u_frequency * TWO_PI);
  float irregular2 = .75 * (sin(uv.x * u_frequency * TWO_PI) + .5 * cos(uv.x * .5 * u_frequency * TWO_PI));

  float offset = mix(zigzag, wave, smoothstep(0., 1., u_shape));
  offset = mix(offset, irregular, smoothstep(1., 2., u_shape));
  offset = mix(offset, irregular2, smoothstep(2., 3., u_shape));
  offset *= 2. * u_amplitude;
  
  float spacing = .02 + .98 * u_spacing;
  float shape = .5 + .5 * sin((uv.y + offset) * PI / spacing);
  
  float edge_width = .02 / (1. + abs(shape)) * (.001 + u_scale);
  edge_width += .5 * max(0., u_softness);
  float dc = clamp(1. - u_dutyCycle, 0., 1.);
  float s = smoothstep(dc - edge_width, dc + edge_width, shape);

  vec3 color = u_color.rgb * u_color.a * s;
  float opacity = u_color.a * s;
  
  fragColor = vec4(color, opacity);
}
`;
var PatternShapes = {
  Checks: 0,
  Stripes: 1,
  Edge: 2
};
var warpFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform float u_scale;
uniform float u_rotation;
uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;
uniform float u_proportion;
uniform float u_softness;
uniform float u_shape;
uniform float u_shapeScale;
uniform float u_distortion;
uniform float u_swirl;
uniform float u_swirlIterations;


out vec4 fragColor;

#define TWO_PI 6.28318530718
#define PI 3.14159265358979323846

vec2 rotate(vec2 uv, float th) {
  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

float random(vec2 st) {
  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}
float noise(vec2 st) {
  vec2 i = floor(st);
  vec2 f = fract(st);
  float a = random(i);
  float b = random(i + vec2(1.0, 0.0));
  float c = random(i + vec2(0.0, 1.0));
  float d = random(i + vec2(1.0, 1.0));

  // Smoothstep for interpolation
  vec2 u = f * f * (3.0 - 2.0 * f);

  // Do the interpolation as two nested mix operations
  // If you try to do this in one big operation, there's enough precision loss to be off by 1px at cell boundaries
  float x1 = mix(a, b, u.x);
  float x2 = mix(c, d, u.x);
  return mix(x1, x2, u.y);

}

vec4 blend_colors(vec4 c1, vec4 c2, vec4 c3, float mixer, float edgesWidth, float edge_blur) {
    vec3 color1 = c1.rgb * c1.a;
    vec3 color2 = c2.rgb * c2.a;
    vec3 color3 = c3.rgb * c3.a;

    float r1 = smoothstep(.0 + .35 * edgesWidth, .7 - .35 * edgesWidth + .5 * edge_blur, mixer);
    float r2 = smoothstep(.3 + .35 * edgesWidth, 1. - .35 * edgesWidth + edge_blur, mixer);

    vec3 blended_color_2 = mix(color1, color2, r1);
    float blended_opacity_2 = mix(c1.a, c2.a, r1);

    vec3 c = mix(blended_color_2, color3, r2);
    float o = mix(blended_opacity_2, c3.a, r2);
    return vec4(c, o);
}

void main() {
    vec2 uv = gl_FragCoord.xy / u_resolution.xy;
    vec2 uv_original = uv;

    float t = .5 * u_time;

    float noise_scale = .0005 + .006 * u_scale;

    uv -= .5;
    uv *= (noise_scale * u_resolution);
    uv = rotate(uv, u_rotation * .5 * PI);
    uv /= u_pixelRatio;
    uv += .5;

    float n1 = noise(uv * 1. + t);
    float n2 = noise(uv * 2. - t);
    float angle = n1 * TWO_PI;
    uv.x += 4. * u_distortion * n2 * cos(angle);
    uv.y += 4. * u_distortion * n2 * sin(angle);

    float iterations_number = ceil(clamp(u_swirlIterations, 1., 30.));
    for (float i = 1.; i <= iterations_number; i++) {
        uv.x += clamp(u_swirl, 0., 2.) / i * cos(t + i * 1.5 * uv.y);
        uv.y += clamp(u_swirl, 0., 2.) / i * cos(t + i * 1. * uv.x);
    }

    float proportion = clamp(u_proportion, 0., 1.);

    float shape = 0.;
    float mixer = 0.;
    if (u_shape < .5) {
      vec2 checks_shape_uv = uv * (.5 + 3.5 * u_shapeScale);
      shape = .5 + .5 * sin(checks_shape_uv.x) * cos(checks_shape_uv.y);
      mixer = shape + .48 * sign(proportion - .5) * pow(abs(proportion - .5), .5);
    } else if (u_shape < 1.5) {
      vec2 stripes_shape_uv = uv * (.25 + 3. * u_shapeScale);
      float f = fract(stripes_shape_uv.y);
      shape = smoothstep(.0, .55, f) * smoothstep(1., .45, f);
      mixer = shape + .48 * sign(proportion - .5) * pow(abs(proportion - .5), .5);
    } else {
      float sh = 1. - uv.y;
      sh -= .5;
      sh /= (noise_scale * u_resolution.y);
      sh += .5;
      float shape_scaling = .2 * (1. - u_shapeScale);
      shape = smoothstep(.45 - shape_scaling, .55 + shape_scaling, sh + .3 * (proportion - .5));
      mixer = shape;
    }

    vec4 color_mix = blend_colors(u_color1, u_color2, u_color3, mixer, 1. - clamp(u_softness, 0., 1.), .01 + .01 * u_scale);

    fragColor = vec4(color_mix.rgb, color_mix.a);
}
`;
var godRaysFragmentShader = `#version 300 es
precision highp float;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

uniform vec4 u_colorBack;
uniform vec4 u_color1;
uniform vec4 u_color2;
uniform vec4 u_color3;

uniform float u_offsetX;
uniform float u_offsetY;

uniform float u_frequency;
uniform float u_spotty;
uniform float u_midSize;
uniform float u_midIntensity;
uniform float u_density;
uniform float u_blending;

out vec4 fragColor;

#define TWO_PI 6.28318530718

float random(vec2 uv) {
  return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453123);
}

vec2 rotate(vec2 uv, float th) {
  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;
}

float noise(vec2 uv) {
  vec2 i = floor(uv);
  vec2 f = fract(uv);

  float a = random(i);
  float b = random(i + vec2(1.0, 0.0));
  float c = random(i + vec2(0.0, 1.0));
  float d = random(i + vec2(1.0, 1.0));

  vec2 u = f * f * (3.0 - 2.0 * f);

  float x1 = mix(a, b, u.x);
  float x2 = mix(c, d, u.x);
  return mix(x1, x2, u.y);
}

float get_noise_shape(vec2 uv, float r, float freq, float density, float time) {
  uv = rotate(uv, .05 * time);
  float a = atan(uv.y, uv.x);
  r -= 3. * time;
  vec2 left = vec2(a * freq, r);
  vec2 right = vec2(mod(a, TWO_PI) * freq, r);
  float n_left = pow(noise(left), density);
  float n_right = pow(noise(right), density);
  float shape = mix(n_right, n_left, smoothstep(-.2, .2, uv.x));
  return shape;
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  float ratio = u_resolution.x / u_resolution.y;

  uv -= .5;
  uv += vec2(-u_offsetX, u_offsetY);
  uv.x *= ratio;

  float t = .2 * u_time;

  float radius = length(uv);
  float spots = 4. * abs(u_spotty);
  float density = 4. - 3. * clamp(u_density, 0., 1.);

  float rays1 = get_noise_shape(uv, radius * spots, 5. * u_frequency, density, t);
  rays1 *= get_noise_shape(uv, .5 + .75 * radius * spots, 4. * u_frequency, density, -.5 * t);
  
  float rays2 = get_noise_shape(uv, 1.5 * radius, 12. * u_frequency, density, t);
  rays2 *= get_noise_shape(uv, -.5 + 1.1 * radius * spots, 7. * u_frequency, density, .75 * t);
  
  float rays3 = get_noise_shape(uv, 2. * radius * spots, 10. * u_frequency, density, t);
  rays3 *= get_noise_shape(uv, 1.1 * radius, 12. * u_frequency, density, .2 * t);

  float mid_shape = smoothstep(1. * abs(u_midSize), .05 * abs(u_midSize), radius);  
  rays3 = mix(rays3, 1., (.5 + .5 * rays1) * u_midIntensity * pow(mid_shape, 7.));
  rays2 = mix(rays2, 1., (.5 + .5 * rays3) * u_midIntensity * pow(mid_shape, 3.));
  rays1 = mix(rays1, 1., u_midIntensity * pow(mid_shape, 5.));
  
  float opacity = rays2 * u_color2.a;
  opacity += rays3 * u_color3.a;
  opacity += rays1 * u_color1.a;
  opacity += u_colorBack.a * (1.0 - rays1 * u_color1.a - rays2 * u_color2.a - rays3 * u_color3.a);
  opacity = clamp(opacity, 0.0, 1.0);

  vec3 added_color = u_colorBack.rgb * (1. - (rays1 + rays2 + rays3)) * u_colorBack.a;
  added_color += u_color1.rgb * rays1 * u_color1.a;
  added_color += u_color2.rgb * rays2 * u_color2.a;
  added_color += u_color3.rgb * rays3 * u_color3.a;

  added_color += u_colorBack.rgb * rays1 * (1.0 - u_color1.a) * u_colorBack.a;
  added_color += u_colorBack.rgb * rays2 * (1.0 - u_color2.a) * u_colorBack.a;
  added_color += u_colorBack.rgb * rays3 * (1.0 - u_color3.a) * u_colorBack.a;
  
  vec3 mixed_color = mix(u_colorBack.rgb * u_colorBack.a, u_color2.rgb, rays2 * u_color2.a);
  mixed_color = mix(mixed_color, u_color3.rgb, rays3 * u_color3.a);
  mixed_color = mix(mixed_color, u_color1.rgb, rays1 * u_color1.a);
  
  vec3 color = mix(mixed_color, added_color, clamp(u_blending, 0., 1.));
  
  fragColor = vec4(color, opacity);
}
`;
var spiralFragmentShader = `#version 300 es
precision highp float;

uniform float u_scale;
uniform float u_offsetX;
uniform float u_offsetY;

uniform vec4 u_color1;
uniform vec4 u_color2;
uniform float u_spiralDensity;
uniform float u_spiralDistortion;
uniform float u_strokeWidth;
uniform float u_strokeCap;
uniform float u_strokeTaper;

uniform float u_noiseFreq;
uniform float u_noisePower;
uniform float u_softness;

uniform float u_time;
uniform float u_pixelRatio;
uniform vec2 u_resolution;

#define TWO_PI 6.28318530718
#define PI 3.14159265358979323846

out vec4 fragColor;

vec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }

float snoise(vec2 v) {
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
    -0.577350269189626, 0.024390243902439);
  vec2 i = floor(v + dot(v, C.yy));
  vec2 x0 = v - i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))
    + i.x + vec3(0.0, i1.x, 1.0));
  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),
      dot(x12.zw, x12.zw)), 0.0);
  m = m * m;
  m = m * m;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
  vec3 g;
  g.x = a0.x * x0.x + h.x * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

void main() {
  vec2 uv = gl_FragCoord.xy / u_resolution.xy;
  float ratio = u_resolution.x / u_resolution.y;

  uv -= .5;
  uv += vec2(-u_offsetX, u_offsetY);

  uv *= (.4 + 15. * u_scale);
  uv.x *= ratio;

  float t = u_time;

  float l = length(uv);
  float angle = atan(uv.y, uv.x) - 2. * t;
  float angle_norm = angle / TWO_PI;  

  angle_norm += .125 * u_noisePower * snoise(.5 * u_noiseFreq * uv);

  float offset = pow(l, 1. - clamp(u_spiralDensity, 0., 1.)) + angle_norm;
  
  float stripe_map = fract(offset);
  stripe_map -= .5 * u_strokeTaper * l;
  
  stripe_map += .25 * u_noisePower * snoise(u_noiseFreq * uv);

  float shape = 2. * abs(stripe_map - .5);
  
  shape *= (1. + u_spiralDistortion * sin(4. * l - t) * cos(PI + l + t));
    
  float stroke_width = clamp(u_strokeWidth, fwidth(l), 1. - fwidth(l));

  float edge_width = min(fwidth(l), fwidth(offset));

  float mid = 1. - smoothstep(.0, .9, l);
  mid = pow(mid, 2.);
  shape -= .5 * u_strokeCap * mid;
  
  shape = smoothstep(stroke_width - edge_width - u_softness, stroke_width + edge_width + u_softness, shape);

  vec3 color = mix(u_color1.rgb * u_color1.a, u_color2.rgb * u_color2.a, shape);
  float opacity = mix(u_color1.a, u_color2.a, shape);

  fragColor = vec4(color, opacity);
}
`;
function getShaderColorFromString(colorString, fallback = [0, 0, 0, 1]) {
  if (Array.isArray(colorString)) {
    if (colorString.length === 4) return colorString;
    if (colorString.length === 3) return [...colorString, 1];
    return getShaderColorFromString(fallback);
  }
  if (typeof colorString !== "string") {
    return getShaderColorFromString(fallback);
  }
  let r, g, b, a = 1;
  if (colorString.startsWith("#")) {
    [r, g, b, a] = hexToRgba(colorString);
  } else if (colorString.startsWith("rgb")) {
    [r, g, b, a] = parseRgba(colorString);
  } else if (colorString.startsWith("hsl")) {
    [r, g, b, a] = hslaToRgba(parseHsla(colorString));
  } else {
    console.error("Unsupported color format", colorString);
    return getShaderColorFromString(fallback);
  }
  return [clamp(r, 0, 1), clamp(g, 0, 1), clamp(b, 0, 1), clamp(a, 0, 1)];
}
function hexToRgba(hex) {
  hex = hex.replace(/^#/, "");
  if (hex.length === 3) {
    hex = hex.split("").map((char) => char + char).join("");
  }
  if (hex.length === 6) {
    hex = hex + "ff";
  }
  const r = parseInt(hex.slice(0, 2), 16) / 255;
  const g = parseInt(hex.slice(2, 4), 16) / 255;
  const b = parseInt(hex.slice(4, 6), 16) / 255;
  const a = parseInt(hex.slice(6, 8), 16) / 255;
  return [r, g, b, a];
}
function parseRgba(rgba) {
  const match = rgba.match(/^rgba?\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*([0-9.]+))?\s*\)$/i);
  if (!match) return [0, 0, 0, 1];
  return [
    parseInt(match[1] ?? "0") / 255,
    parseInt(match[2] ?? "0") / 255,
    parseInt(match[3] ?? "0") / 255,
    match[4] === void 0 ? 1 : parseFloat(match[4])
  ];
}
function parseHsla(hsla) {
  const match = hsla.match(/^hsla?\s*\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*([0-9.]+))?\s*\)$/i);
  if (!match) return [0, 0, 0, 1];
  return [
    parseInt(match[1] ?? "0"),
    parseInt(match[2] ?? "0"),
    parseInt(match[3] ?? "0"),
    match[4] === void 0 ? 1 : parseFloat(match[4])
  ];
}
function hslaToRgba(hsla) {
  const [h, s, l, a] = hsla;
  const hDecimal = h / 360;
  const sDecimal = s / 100;
  const lDecimal = l / 100;
  let r, g, b;
  if (s === 0) {
    r = g = b = lDecimal;
  } else {
    const hue2rgb = (p2, q2, t) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
      if (t < 1 / 2) return q2;
      if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      return p2;
    };
    const q = lDecimal < 0.5 ? lDecimal * (1 + sDecimal) : lDecimal + sDecimal - lDecimal * sDecimal;
    const p = 2 * lDecimal - q;
    r = hue2rgb(p, q, hDecimal + 1 / 3);
    g = hue2rgb(p, q, hDecimal);
    b = hue2rgb(p, q, hDecimal - 1 / 3);
  }
  return [r, g, b, a];
}
var clamp = (n, min, max) => Math.min(Math.max(n, min), max);

// node_modules/.pnpm/@paper-design+shaders-react@0.0.29/node_modules/@paper-design/shaders-react/dist/index.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_react6 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_react7 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_react8 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_react9 = __toESM(require_react());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var import_react10 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_react11 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_react12 = __toESM(require_react());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var import_react13 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var import_react14 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
function useMergeRefs(refs) {
  const cleanupRef = React.useRef(void 0);
  const refEffect = React.useCallback((instance) => {
    const cleanups = refs.map((ref) => {
      if (ref == null) {
        return;
      }
      if (typeof ref === "function") {
        const refCallback = ref;
        const refCleanup = refCallback(instance);
        return typeof refCleanup === "function" ? refCleanup : () => {
          refCallback(null);
        };
      }
      ref.current = instance;
      return () => {
        ref.current = null;
      };
    });
    return () => {
      cleanups.forEach((refCleanup) => refCleanup == null ? void 0 : refCleanup());
    };
  }, refs);
  return React.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) {
        cleanupRef.current = refEffect(value);
      }
    };
  }, refs);
}
var processUniforms = (uniforms) => {
  const processedUniforms = {};
  const imageLoadPromises = [];
  const isValidUrl = (url) => {
    try {
      if (url.startsWith("/")) return true;
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };
  const isExternalUrl = (url) => {
    try {
      if (url.startsWith("/")) return false;
      const urlObject = new URL(url, window.location.origin);
      return urlObject.origin !== window.location.origin;
    } catch {
      return false;
    }
  };
  Object.entries(uniforms).forEach(([key, value]) => {
    if (typeof value === "string") {
      if (!isValidUrl(value)) {
        console.warn(`Uniform "${key}" has invalid URL "${value}". Skipping image loading.`);
        return;
      }
      const imagePromise = new Promise((resolve, reject) => {
        const img = new Image();
        if (isExternalUrl(value)) {
          img.crossOrigin = "anonymous";
        }
        img.onload = () => {
          processedUniforms[key] = img;
          resolve();
        };
        img.onerror = () => {
          console.error(`Could not set uniforms. Failed to load image at ${value}`);
          reject();
        };
        img.src = value;
      });
      imageLoadPromises.push(imagePromise);
    } else {
      processedUniforms[key] = value;
    }
  });
  return Promise.all(imageLoadPromises).then(() => processedUniforms);
};
var ShaderMount2 = (0, import_react.forwardRef)(
  function ShaderMountImpl({
    shaderMountRef: externalShaderMountRef,
    fragmentShader,
    uniforms = {},
    webGlContextAttributes,
    speed = 1,
    frame = 0,
    ...divProps
  }, forwardedRef) {
    const [isInitialized, setIsInitialized] = (0, import_react.useState)(false);
    const divRef = (0, import_react.useRef)(null);
    const shaderMountRef = (0, import_react.useRef)(null);
    (0, import_react.useEffect)(() => {
      const initShader = async () => {
        const processedUniforms = await processUniforms(uniforms);
        if (divRef.current && !shaderMountRef.current) {
          shaderMountRef.current = new ShaderMount(
            divRef.current,
            fragmentShader,
            processedUniforms,
            webGlContextAttributes,
            speed,
            frame
          );
          if (externalShaderMountRef) {
            externalShaderMountRef.current = shaderMountRef.current;
          }
          setIsInitialized(true);
        }
      };
      initShader();
      return () => {
        var _a;
        (_a = shaderMountRef.current) == null ? void 0 : _a.dispose();
        shaderMountRef.current = null;
      };
    }, [fragmentShader, webGlContextAttributes]);
    (0, import_react.useEffect)(() => {
      const updateUniforms = async () => {
        var _a;
        const processedUniforms = await processUniforms(uniforms);
        (_a = shaderMountRef.current) == null ? void 0 : _a.setUniforms(processedUniforms);
      };
      updateUniforms();
    }, [uniforms, isInitialized]);
    (0, import_react.useEffect)(() => {
      var _a;
      (_a = shaderMountRef.current) == null ? void 0 : _a.setSpeed(speed);
    }, [speed, isInitialized]);
    (0, import_react.useEffect)(() => {
      var _a;
      (_a = shaderMountRef.current) == null ? void 0 : _a.setFrame(frame);
    }, [frame, isInitialized]);
    return (0, import_jsx_runtime.jsx)("div", { ref: useMergeRefs([divRef, forwardedRef]), ...divProps });
  }
);
ShaderMount2.displayName = "ShaderMount";
var defaultPreset = {
  name: "Default",
  params: {
    speed: 0.15,
    frame: 0,
    color1: "hsla(259, 29%, 73%, 1)",
    color2: "hsla(263, 57%, 39%, 1)",
    color3: "hsla(48, 73%, 84%, 1)",
    color4: "hsla(295, 32%, 70%, 1)"
  }
};
var beachPreset = {
  name: "Beach",
  params: {
    speed: 0.1,
    frame: 0,
    color1: "hsla(186, 81%, 83%, 1)",
    color2: "hsla(198, 55%, 68%, 1)",
    color3: "hsla(53, 67%, 88%, 1)",
    color4: "hsla(45, 93%, 73%, 1)"
  }
};
var fadedPreset = {
  name: "Faded",
  params: {
    speed: -0.3,
    frame: 0,
    color1: "hsla(186, 41%, 90%, 1)",
    color2: "hsla(208, 71%, 85%, 1)",
    color3: "hsla(183, 51%, 92%, 1)",
    color4: "hsla(201, 72%, 90%, 1)"
  }
};
var meshGradientPresets = [defaultPreset, beachPreset, fadedPreset];
var MeshGradient = ({ color1, color2, color3, color4, ...props }) => {
  const uniforms = (0, import_react2.useMemo)(() => {
    return {
      u_color1: getShaderColorFromString(color1, defaultPreset.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset.params.color3),
      u_color4: getShaderColorFromString(color4, defaultPreset.params.color4)
    };
  }, [color1, color2, color3, color4]);
  return (0, import_jsx_runtime2.jsx)(ShaderMount2, { ...props, fragmentShader: meshGradientFragmentShader, uniforms });
};
var defaultPreset2 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 0.5,
    frame: 0,
    colorInner: "hsla(0, 0%, 100%, 1)",
    colorOuter: "hsla(38, 4%, 38%, 1)",
    noiseScale: 1,
    thickness: 0.5
  }
};
var cloudPreset = {
  name: "Cloud",
  params: {
    scale: 1,
    speed: 1,
    frame: 0,
    colorInner: "hsla(0, 0%, 100%, 1)",
    colorOuter: "hsla(0, 0%, 100%, 1)",
    noiseScale: 1.8,
    thickness: 0.7
  },
  style: {
    background: "hsla(218, 100%, 62%, 1)"
  }
};
var firePreset = {
  name: "Fire",
  params: {
    scale: 1,
    speed: 4,
    frame: 0,
    colorInner: "hsla(40, 100%, 50%, 1)",
    colorOuter: "hsla(0, 100%, 50%, 1)",
    noiseScale: 1.4,
    thickness: 0.35
  },
  style: {
    background: "hsla(20, 100%, 5%, 1)"
  }
};
var electricPreset = {
  name: "Electric",
  params: {
    scale: 1,
    speed: -2.5,
    frame: 0,
    colorInner: "hsla(47, 100%, 64%, 1)",
    colorOuter: "hsla(47, 100%, 64%, 1)",
    noiseScale: 1.8,
    thickness: 0.1
  },
  style: {
    background: "hsla(47, 50%, 7%, 1)"
  }
};
var poisonPreset = {
  name: "Poison",
  params: {
    scale: 1,
    speed: 3,
    frame: 0,
    colorInner: "hsla(120, 100%, 3%, 1)",
    colorOuter: "hsla(120, 100%, 66%, 1)",
    noiseScale: 5,
    thickness: 0.6
  },
  style: {
    background: "hsla(120, 100%, 3%, 1)"
  }
};
var smokeRingPresets = [
  defaultPreset2,
  cloudPreset,
  firePreset,
  electricPreset,
  poisonPreset
];
var SmokeRing = ({
  scale,
  colorInner,
  colorOuter,
  noiseScale,
  thickness,
  ...props
}) => {
  const uniforms = (0, import_react3.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset2.params.scale,
      u_colorInner: getShaderColorFromString(colorInner, defaultPreset2.params.colorInner),
      u_colorOuter: getShaderColorFromString(colorOuter, defaultPreset2.params.colorOuter),
      u_noiseScale: noiseScale ?? defaultPreset2.params.noiseScale,
      u_thickness: thickness ?? defaultPreset2.params.thickness
    };
  }, [scale, colorInner, colorOuter, noiseScale, thickness]);
  return (0, import_jsx_runtime3.jsx)(ShaderMount2, { ...props, fragmentShader: smokeRingFragmentShader, uniforms });
};
var defaultPreset3 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 1,
    frame: 0,
    colorFront: "hsla(261, 100%, 82%, 1)",
    colorBack: "hsla(0, 0%, 0%, 1)",
    brightness: 1.3
  }
};
var marblePreset = {
  name: "Marble",
  params: {
    scale: 0.4,
    speed: 0,
    frame: 0,
    colorFront: "hsla(230, 24%, 15%, 1)",
    colorBack: "hsla(0, 0%, 97%, 1)",
    brightness: 1.1
  }
};
var neuroNoisePresets = [defaultPreset3, marblePreset];
var NeuroNoise = ({
  scale,
  colorFront,
  colorBack,
  brightness,
  ...props
}) => {
  const uniforms = (0, import_react4.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset3.params.scale,
      u_colorFront: getShaderColorFromString(colorFront, defaultPreset3.params.colorFront),
      u_colorBack: getShaderColorFromString(colorBack, defaultPreset3.params.colorBack),
      u_brightness: brightness ?? defaultPreset3.params.brightness
    };
  }, [scale, colorFront, colorBack, brightness]);
  return (0, import_jsx_runtime4.jsx)(ShaderMount2, { ...props, fragmentShader: neuroNoiseFragmentShader, uniforms });
};
var defaultPreset4 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 2,
    frame: 0,
    color1: "hsla(358, 66%, 49%, 1)",
    color2: "hsla(145, 30%, 33%, 1)",
    color3: "hsla(39, 88%, 52%, 1)",
    color4: "hsla(274, 30%, 35%, 1)",
    dotSize: 0.7,
    dotSizeRange: 0.4,
    spreading: 1
  }
};
var dotOrbitPresets = [defaultPreset4];
var DotOrbit = ({
  scale,
  color1,
  color2,
  color3,
  color4,
  dotSize,
  dotSizeRange,
  spreading,
  ...props
}) => {
  const uniforms = (0, import_react5.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset4.params.scale,
      u_color1: getShaderColorFromString(color1, defaultPreset4.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset4.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset4.params.color3),
      u_color4: getShaderColorFromString(color4, defaultPreset4.params.color4),
      u_dotSize: dotSize ?? defaultPreset4.params.dotSize,
      u_dotSizeRange: dotSizeRange ?? defaultPreset4.params.dotSizeRange,
      u_spreading: spreading ?? defaultPreset4.params.spreading
    };
  }, [scale, color1, color2, color3, color4, dotSize, dotSizeRange, spreading]);
  return (0, import_jsx_runtime5.jsx)(ShaderMount2, { ...props, fragmentShader: dotOrbitFragmentShader, uniforms });
};
var defaultPreset5 = {
  name: "Default",
  params: {
    colorFill: "hsla(0, 0%, 0%, 1)",
    colorStroke: "hsla(40, 100%, 50%, 1)",
    dotSize: 2,
    gridSpacingX: 50,
    gridSpacingY: 50,
    strokeWidth: 0,
    sizeRange: 0,
    opacityRange: 0,
    shape: DotGridShapes.Circle
  }
};
var macrodataPreset = {
  name: "Macrodata",
  params: {
    colorFill: "hsla(218, 100%, 67%, 1)",
    colorStroke: "hsla(0, 0%, 0%, 1)",
    dotSize: 3,
    gridSpacingX: 25,
    gridSpacingY: 25,
    strokeWidth: 0,
    sizeRange: 0.25,
    opacityRange: 0.9,
    shape: DotGridShapes.Circle
  },
  style: {
    background: "hsla(211, 37%, 13%, 1)"
  }
};
var trianglesPreset = {
  name: "Triangles",
  params: {
    colorFill: "hsla(0, 0%, 100%, 1)",
    colorStroke: "hsla(0, 0%, 0%, .5)",
    dotSize: 5,
    gridSpacingX: 32,
    gridSpacingY: 32,
    strokeWidth: 1,
    sizeRange: 0,
    opacityRange: 0,
    shape: DotGridShapes.Triangle
  },
  style: {
    background: "hsla(0, 0%, 100%, 1)"
  }
};
var bubblesPreset = {
  name: "Bubbles",
  params: {
    colorFill: "hsla(100, 30%, 100%, 1)",
    colorStroke: "hsla(0, 100%, 0%, 1)",
    dotSize: 28,
    gridSpacingX: 60,
    gridSpacingY: 60,
    strokeWidth: 12,
    sizeRange: 0.7,
    opacityRange: 1.3,
    shape: DotGridShapes.Circle
  },
  style: {
    background: "hsla(234, 100%, 31%, .5)"
  }
};
var treeLinePreset = {
  name: "Tree line",
  params: {
    colorFill: "hsla(150, 80%, 10%, 1)",
    colorStroke: "hsla(0, 0%, 0%, 1)",
    dotSize: 8,
    gridSpacingX: 20,
    gridSpacingY: 90,
    strokeWidth: 0,
    sizeRange: 1,
    opacityRange: 0.6,
    shape: DotGridShapes.Circle
  },
  style: {
    background: "hsla(100, 100%, 36%, .05)"
  }
};
var diamondsPreset = {
  name: "Diamonds",
  params: {
    colorFill: "hsla(0, 100%, 50%, 1)",
    colorStroke: "hsla(0, 0%, 0%, 1)",
    dotSize: 15,
    gridSpacingX: 30,
    gridSpacingY: 30,
    strokeWidth: 0,
    sizeRange: 0,
    opacityRange: 2,
    shape: DotGridShapes.Diamond
  },
  style: {
    background: "hsla(0, 0%, 0%, 0)"
  }
};
var wallpaperPreset = {
  name: "Wallpaper",
  params: {
    colorFill: "hsla(0, 0%, 0%, 0)",
    colorStroke: "hsla(36, 48%, 58%, 1)",
    dotSize: 9,
    gridSpacingX: 32,
    gridSpacingY: 32,
    strokeWidth: 1,
    sizeRange: 0,
    opacityRange: 0,
    shape: DotGridShapes.Diamond
  },
  style: {
    background: "hsla(154, 33%, 19%, 1)"
  }
};
var matrixPreset = {
  name: "Enter the Matrix",
  params: {
    colorFill: "hsla(182, 100%, 64%, 1)",
    colorStroke: "hsla(0, 100%, 100%, 0)",
    dotSize: 2,
    gridSpacingX: 10,
    gridSpacingY: 10,
    strokeWidth: 0.5,
    sizeRange: 0.25,
    opacityRange: 1,
    shape: DotGridShapes.Triangle
  },
  style: {
    background: "hsla(0, 100%, 0%, 1)"
  }
};
var waveformPreset = {
  name: "Waveform",
  params: {
    colorFill: "hsla(227, 93%, 38%, 1)",
    colorStroke: "hsla(0, 0%, 0%, 0)",
    dotSize: 100,
    gridSpacingX: 2,
    gridSpacingY: 215,
    strokeWidth: 0,
    sizeRange: 1,
    opacityRange: 0,
    shape: DotGridShapes.Square
  },
  style: {
    background: "hsla(0, 100%, 100%, 1)"
  }
};
var dotGridPresets = [
  defaultPreset5,
  macrodataPreset,
  trianglesPreset,
  bubblesPreset,
  treeLinePreset,
  diamondsPreset,
  wallpaperPreset,
  matrixPreset,
  waveformPreset
];
var DotGrid = ({
  colorFill,
  colorStroke,
  dotSize,
  gridSpacingX,
  gridSpacingY,
  strokeWidth,
  sizeRange,
  opacityRange,
  shape,
  ...props
}) => {
  const uniforms = (0, import_react6.useMemo)(() => {
    return {
      u_colorFill: getShaderColorFromString(colorFill, defaultPreset5.params.colorStroke),
      u_colorStroke: getShaderColorFromString(colorStroke, defaultPreset5.params.colorStroke),
      u_dotSize: dotSize ?? defaultPreset5.params.dotSize,
      u_gridSpacingX: gridSpacingX ?? defaultPreset5.params.gridSpacingX,
      u_gridSpacingY: gridSpacingY ?? defaultPreset5.params.gridSpacingY,
      u_strokeWidth: strokeWidth ?? defaultPreset5.params.strokeWidth,
      u_sizeRange: sizeRange ?? defaultPreset5.params.sizeRange,
      u_opacityRange: opacityRange ?? defaultPreset5.params.opacityRange,
      u_shape: shape ?? defaultPreset5.params.shape
    };
  }, [colorFill, colorStroke, dotSize, gridSpacingX, gridSpacingY, strokeWidth, sizeRange, opacityRange, shape]);
  return (0, import_jsx_runtime6.jsx)(ShaderMount2, { ...props, fragmentShader: dotGridFragmentShader, uniforms });
};
var defaultPreset6 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 0.15,
    frame: 0,
    color1: "hsla(208, 25%, 45%, 1)",
    color2: "hsla(94, 38%, 59%, 1)",
    color3: "hsla(359, 94%, 62%, 1)",
    color4: "hsla(42, 93%, 64%, 1)",
    color5: "hsla(0, 0%, 100%, 1)",
    stepsNumber: 13
  }
};
var magmaPreset = {
  name: "Magma",
  params: {
    scale: 0.3,
    speed: 0.2,
    frame: 0,
    color1: "hsla(0, 100%, 36%, 1)",
    color2: "hsla(0, 95%, 44%, 1)",
    color3: "hsla(20, 100%, 49%, 1)",
    color4: "hsla(45, 100%, 45%, 1)",
    color5: "hsla(31, 100%, 94%, 1)",
    stepsNumber: 8
  }
};
var bloodCellPreset = {
  name: "Blood cell",
  params: {
    scale: 1.2,
    speed: 0.22,
    frame: 0,
    color1: "hsla(302, 43%, 13%, 1)",
    color2: "hsla(325, 93%, 17%, 1)",
    color3: "hsla(338, 80%, 25%, 1)",
    color4: "hsla(338, 80%, 25%, 1)",
    color5: "hsla(2, 85%, 72%, 1)",
    stepsNumber: 29
  }
};
var firstContactPreset = {
  name: "First contact",
  params: {
    scale: 1.2,
    speed: -0.1,
    frame: 0,
    color1: "hsla(300, 43%, 82%, 1)",
    color2: "hsla(266, 70%, 9%, 1)",
    color3: "hsla(289, 36%, 26%, 1)",
    color4: "hsla(0, 41%, 78%, 1)",
    color5: "hsla(0, 100%, 96%, 1)",
    stepsNumber: 40
  }
};
var steppedSimplexNoisePresets = [
  defaultPreset6,
  magmaPreset,
  bloodCellPreset,
  firstContactPreset
];
var SteppedSimplexNoise = ({
  scale,
  color1,
  color2,
  color3,
  color4,
  color5,
  stepsNumber,
  ...props
}) => {
  const uniforms = (0, import_react7.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset6.params.scale,
      u_color1: getShaderColorFromString(color1, defaultPreset6.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset6.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset6.params.color3),
      u_color4: getShaderColorFromString(color4, defaultPreset6.params.color4),
      u_color5: getShaderColorFromString(color5, defaultPreset6.params.color5),
      u_steps_number: stepsNumber ?? defaultPreset6.params.stepsNumber
    };
  }, [scale, color1, color2, color3, color4, color5, stepsNumber]);
  return (0, import_jsx_runtime7.jsx)(ShaderMount2, { ...props, fragmentShader: steppedSimplexNoiseFragmentShader, uniforms });
};
var defaultPreset7 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 0.6,
    frame: 0,
    color1: "hsla(350, 90%, 55%, 1)",
    color2: "hsla(350, 80%, 60%, 1)",
    color3: "hsla(20, 85%, 70%, 1)",
    ballSize: 1,
    visibilityRange: 0.4
  }
};
var metaballsPresets = [defaultPreset7];
var Metaballs = ({
  scale,
  color1,
  color2,
  color3,
  ballSize,
  visibilityRange,
  ...props
}) => {
  const uniforms = (0, import_react8.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset7.params.scale,
      u_color1: getShaderColorFromString(color1, defaultPreset7.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset7.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset7.params.color3),
      u_ballSize: ballSize ?? defaultPreset7.params.ballSize,
      u_visibilityRange: visibilityRange ?? defaultPreset7.params.visibilityRange
    };
  }, [scale, color1, color2, color3, ballSize, visibilityRange]);
  return (0, import_jsx_runtime8.jsx)(ShaderMount2, { ...props, fragmentShader: metaballsFragmentShader, uniforms });
};
var defaultPreset8 = {
  name: "Default",
  params: {
    scale: 1,
    rotation: 0,
    color: "hsla(204, 47%, 45%, 1)",
    shape: 1,
    frequency: 0.5,
    amplitude: 0.5,
    spacing: 0.75,
    dutyCycle: 0.2,
    softness: 0
  }
};
var spikesPreset = {
  name: "Spikes",
  params: {
    scale: 2.3,
    rotation: 0,
    color: "hsla(290, 52%, 15%, 1)",
    shape: 0,
    frequency: 0.5,
    amplitude: 0.9,
    spacing: 0.37,
    dutyCycle: 0.93,
    softness: 0.15
  },
  style: {
    background: "hsla(65, 100%, 95%, 1)"
  }
};
var groovyPreset = {
  name: "Groovy",
  params: {
    scale: 0.5,
    rotation: 1,
    color: "hsla(20, 100%, 71%, 1)",
    shape: 2.37,
    frequency: 0.2,
    amplitude: 0.67,
    spacing: 1.17,
    dutyCycle: 0.57,
    softness: 0
  },
  style: {
    background: "hsla(60, 100%, 97%, 1)"
  }
};
var tangledUpPreset = {
  name: "Tangled up",
  params: {
    scale: 3.04,
    rotation: 1,
    color: "hsla(85.5, 35.7%, 78%, 1)",
    shape: 3,
    frequency: 0.44,
    amplitude: 0.57,
    spacing: 1.05,
    dutyCycle: 0.97,
    softness: 0
  },
  style: {
    background: "hsla(198.7, 66.7%, 14.1%, 1)"
  }
};
var zigZagPreset = {
  name: "Zig zag",
  params: {
    scale: 2.7,
    rotation: 1,
    color: "hsla(0, 0%, 90%, 1)",
    shape: 0,
    frequency: 0.6,
    amplitude: 0.8,
    spacing: 0.5,
    dutyCycle: 1,
    softness: 0.5
  },
  style: {
    background: "hsla(0, 0%, 0%, 1)"
  }
};
var waveRidePreset = {
  name: "Ride the wave",
  params: {
    scale: 0.84,
    rotation: 0,
    color: "hsla(0, 0%, 12%, 1)",
    shape: 2.23,
    frequency: 0.1,
    amplitude: 0.6,
    spacing: 0.41,
    dutyCycle: 0.99,
    softness: 0
  },
  style: {
    background: "hsla(65, 100%, 95%, 1)"
  }
};
var wavesPresets = [
  defaultPreset8,
  spikesPreset,
  groovyPreset,
  tangledUpPreset,
  zigZagPreset,
  waveRidePreset
];
var Waves = ({
  scale,
  rotation,
  color,
  shape,
  frequency,
  amplitude,
  spacing,
  dutyCycle,
  softness,
  ...props
}) => {
  const uniforms = (0, import_react9.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset8.params.scale,
      u_rotation: rotation ?? defaultPreset8.params.rotation,
      u_color: getShaderColorFromString(color, defaultPreset8.params.color),
      u_shape: shape ?? defaultPreset8.params.shape,
      u_frequency: frequency ?? defaultPreset8.params.frequency,
      u_amplitude: amplitude ?? defaultPreset8.params.amplitude,
      u_spacing: spacing ?? defaultPreset8.params.spacing,
      u_dutyCycle: dutyCycle ?? defaultPreset8.params.dutyCycle,
      u_softness: softness ?? defaultPreset8.params.softness
    };
  }, [scale, rotation, color, shape, frequency, amplitude, spacing, dutyCycle, softness]);
  return (0, import_jsx_runtime9.jsx)(ShaderMount2, { ...props, fragmentShader: wavesFragmentShader, uniforms });
};
var defaultPreset9 = {
  name: "Default",
  params: {
    scale: 1,
    speed: 0.5,
    frame: 0,
    color: "hsla(0, 0%, 15%, 1)",
    proportion: 0.65,
    softness: 0.1,
    octaveCount: 2,
    persistence: 1,
    lacunarity: 1.5
  }
};
var nintendoWaterPreset = {
  name: "Nintendo Water",
  params: {
    scale: 0.2,
    speed: 0.4,
    frame: 0,
    color: "hsla(200, 66%, 90%, 1)",
    proportion: 0.42,
    softness: 0,
    octaveCount: 2,
    persistence: 0.55,
    lacunarity: 1.8
  },
  style: {
    background: "hsla(220, 66%, 50%, 1)"
  }
};
var colonyPreset = {
  name: "Colony",
  params: {
    scale: 0.15,
    speed: 0,
    frame: 0,
    color: "hsla(230, 80%, 20%, 1)",
    octaveCount: 6,
    persistence: 1,
    lacunarity: 2.55,
    proportion: 0.65,
    softness: 0.35
  },
  style: {
    background: "hsla(56, 86%, 81%, 1)"
  }
};
var phosphenesPreset = {
  name: "Phosphenes",
  params: {
    scale: 0.03,
    speed: 0.15,
    frame: 0,
    color: "hsla(150, 50%, 60%, 1)",
    proportion: 0.45,
    softness: 0.45,
    octaveCount: 6,
    persistence: 0.3,
    lacunarity: 3
  },
  style: {
    background: "hsla(350, 80%, 70%, 1)"
  }
};
var mossPreset = {
  name: "Moss",
  params: {
    scale: 0.15,
    speed: 0.02,
    frame: 0,
    color: "hsla(0, 0%, 15%, 1)",
    proportion: 0.65,
    softness: 0.35,
    octaveCount: 6,
    persistence: 1,
    lacunarity: 2.55
  },
  style: {
    background: "hsla(137, 100%, 51%, 1)"
  }
};
var wormsPreset = {
  name: "Worms",
  params: {
    scale: 2,
    speed: 0,
    frame: 0,
    color: "hsla(0, 0%, 35%, 1)",
    proportion: 0.5,
    softness: 0,
    octaveCount: 1,
    persistence: 1,
    lacunarity: 1.5
  },
  style: {
    background: "hsla(0, 100%, 100%, 1)"
  }
};
var perlinNoisePresets = [
  defaultPreset9,
  nintendoWaterPreset,
  colonyPreset,
  phosphenesPreset,
  mossPreset,
  wormsPreset
];
var PerlinNoise = ({
  scale,
  color,
  proportion,
  softness,
  octaveCount,
  persistence,
  lacunarity,
  ...props
}) => {
  const uniforms = (0, import_react10.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset9.params.scale,
      u_color: getShaderColorFromString(color, defaultPreset9.params.color),
      u_proportion: proportion ?? defaultPreset9.params.proportion,
      u_softness: softness ?? defaultPreset9.params.softness,
      u_octaveCount: octaveCount ?? defaultPreset9.params.octaveCount,
      u_persistence: persistence ?? defaultPreset9.params.persistence,
      u_lacunarity: lacunarity ?? defaultPreset9.params.lacunarity
    };
  }, [scale, color, proportion, softness, octaveCount, persistence, lacunarity]);
  return (0, import_jsx_runtime10.jsx)(ShaderMount2, { ...props, fragmentShader: perlinNoiseFragmentShader, uniforms });
};
var defaultPreset10 = {
  name: "Default",
  params: {
    scale: 1.5,
    speed: 0.5,
    frame: 0,
    colorCell1: "hsla(15, 80%, 50%, 1)",
    colorCell2: "hsla(180, 80%, 50%, 1)",
    colorCell3: "hsla(200, 80%, 50%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 0.5,
    distance: 0.25,
    edgesSize: 0.15,
    edgesSoftness: 0.01,
    middleSize: 0,
    middleSoftness: 0
  }
};
var classicPreset = {
  name: "Classic",
  params: {
    scale: 3,
    speed: 0.8,
    frame: 0,
    colorCell1: "hsla(0, 100%, 100%, 1)",
    colorCell2: "hsla(0, 0%, 100%, 1)",
    colorCell3: "hsla(0, 100%, 0%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 1,
    distance: 0.45,
    edgesSize: 0.02,
    edgesSoftness: 0.07,
    middleSize: 0,
    middleSoftness: 0
  }
};
var giraffePreset = {
  name: "Giraffe",
  params: {
    scale: 1,
    speed: 0.6,
    frame: 0,
    colorCell1: "hsla(32, 100%, 18%, 1)",
    colorCell2: "hsla(42, 93%, 35%, 1)",
    colorCell3: "hsla(32, 100%, 18%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 1,
    distance: 0.25,
    edgesSize: 0.2,
    edgesSoftness: 0.01,
    middleSize: 0,
    middleSoftness: 0
  }
};
var eyesPreset = {
  name: "Eyes",
  params: {
    scale: 1.6,
    speed: 0.6,
    frame: 0,
    colorCell1: "hsla(79, 84%, 60%, 1)",
    colorCell2: "hsla(207, 53%, 41%, 1)",
    colorCell3: "hsla(207, 80%, 65%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 1,
    distance: 0.25,
    edgesSize: 0.62,
    edgesSoftness: 0.01,
    middleSize: 0.1,
    middleSoftness: 0
  }
};
var bubblesPreset2 = {
  name: "Bubbles",
  params: {
    scale: 2,
    speed: 0.5,
    frame: 0,
    colorCell1: "hsla(0, 100%, 50%, 1)",
    colorCell2: "hsla(169, 100%, 66%, 1)",
    colorCell3: "hsla(50, 100%, 66%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 1,
    distance: 0.5,
    edgesSize: 0.81,
    edgesSoftness: 0,
    middleSize: 0,
    middleSoftness: 0
  }
};
var cellsPreset = {
  name: "Cells",
  params: {
    scale: 2,
    speed: 1,
    frame: 0,
    colorCell1: "hsla(0, 0%, 100%, 1)",
    colorCell2: "hsla(0, 0%, 100%, 1)",
    colorCell3: "hsla(0, 0%, 100%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 1,
    distance: 0.38,
    edgesSize: 0.1,
    edgesSoftness: 0.02,
    middleSize: 0,
    middleSoftness: 0
  }
};
var glowPreset = {
  name: "Glow",
  params: {
    scale: 1.2,
    speed: 0.8,
    frame: 0,
    colorCell1: "hsla(40, 100%, 50%, 1)",
    colorCell2: "hsla(311, 100%, 59%, 1)",
    colorCell3: "hsla(180, 100%, 65%, 1)",
    colorMid: "hsla(0, 0%, 100%, 1)",
    colorGradient: 1,
    distance: 0.25,
    edgesSize: 0.15,
    edgesSoftness: 0.01,
    middleSize: 0.7,
    middleSoftness: 1
  }
};
var tilesPreset = {
  name: "Tiles",
  params: {
    scale: 1.3,
    speed: 1,
    frame: 0,
    colorCell1: "hsla(80, 50%, 50%, 1)",
    colorCell2: "hsla(0, 50%, 100%, 1)",
    colorCell3: "hsla(200, 50%, 50%, 1)",
    colorMid: "hsla(0, 0%, 0%, 1)",
    colorGradient: 0,
    distance: 0.05,
    edgesSize: 0.25,
    edgesSoftness: 0.02,
    middleSize: 0,
    middleSoftness: 0
  }
};
var voronoiPresets = [
  defaultPreset10,
  classicPreset,
  giraffePreset,
  eyesPreset,
  bubblesPreset2,
  cellsPreset,
  glowPreset,
  tilesPreset
];
var Voronoi = ({
  scale,
  colorCell1,
  colorCell2,
  colorCell3,
  colorMid,
  colorGradient,
  distance,
  edgesSize,
  edgesSoftness,
  middleSize,
  middleSoftness,
  ...props
}) => {
  const uniforms = (0, import_react11.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset10.params.scale,
      u_colorCell1: getShaderColorFromString(colorCell1, defaultPreset10.params.colorCell1),
      u_colorCell2: getShaderColorFromString(colorCell2, defaultPreset10.params.colorCell2),
      u_colorCell3: getShaderColorFromString(colorCell3, defaultPreset10.params.colorCell3),
      u_colorMid: getShaderColorFromString(colorMid, defaultPreset10.params.colorMid),
      u_colorGradient: colorGradient ?? defaultPreset10.params.colorGradient,
      u_distance: distance ?? defaultPreset10.params.distance,
      u_edgesSize: edgesSize ?? defaultPreset10.params.edgesSize,
      u_edgesSoftness: edgesSoftness ?? defaultPreset10.params.edgesSoftness,
      u_middleSize: middleSize ?? defaultPreset10.params.middleSize,
      u_middleSoftness: middleSoftness ?? defaultPreset10.params.middleSoftness
    };
  }, [
    scale,
    colorCell1,
    colorCell3,
    colorCell2,
    colorMid,
    colorGradient,
    distance,
    edgesSize,
    edgesSoftness,
    middleSize,
    middleSoftness
  ]);
  return (0, import_jsx_runtime11.jsx)(ShaderMount2, { ...props, fragmentShader: voronoiFragmentShader, uniforms });
};
var defaultPreset11 = {
  name: "Default",
  params: {
    scale: 1,
    rotation: 0,
    speed: 0.1,
    frame: 0,
    color1: "hsla(0, 0%, 15%, 1)",
    color2: "hsla(203, 80%, 70%, 1)",
    color3: "hsla(0, 0%, 100%, 1)",
    proportion: 0.35,
    softness: 1,
    distortion: 0.25,
    swirl: 0.8,
    swirlIterations: 10,
    shapeScale: 0.1,
    shape: PatternShapes.Checks
  }
};
var presetCauldron = {
  name: "Cauldron Pot",
  params: {
    scale: 1.1,
    rotation: 1.62,
    speed: 1,
    frame: 0,
    color1: "hsla(100, 51%, 75%, 1)",
    color2: "hsla(220, 39%, 32%, 1)",
    color3: "hsla(129.2, 41.9%, 6.1%, 1)",
    proportion: 0.64,
    softness: 0.95,
    distortion: 0.2,
    swirl: 0.86,
    swirlIterations: 7,
    shapeScale: 0,
    shape: PatternShapes.Edge
  }
};
var presetSilk = {
  name: "Silk",
  params: {
    scale: 0.26,
    rotation: 0,
    speed: 0.5,
    frame: 0,
    color1: "hsla(0, 9%, 7%, 1)",
    color2: "hsla(8, 13%, 34%, 1)",
    color3: "hsla(5, 8%, 71%, 1)",
    proportion: 0,
    softness: 1,
    distortion: 0.3,
    swirl: 0.6,
    swirlIterations: 11,
    shapeScale: 0.05,
    shape: PatternShapes.Stripes
  }
};
var presetPassion = {
  name: "Passion",
  params: {
    scale: 0.25,
    rotation: 1.35,
    speed: 0.3,
    frame: 0,
    color1: "hsla(0, 44.7%, 14.9%, 1)",
    color2: "hsla(353.4, 34%, 42.2%, 1)",
    color3: "hsla(29, 100%, 76.1%, 1)",
    proportion: 0.5,
    softness: 1,
    distortion: 0.09,
    swirl: 0.9,
    swirlIterations: 6,
    shapeScale: 0.25,
    shape: PatternShapes.Checks
  }
};
var presetPhantom = {
  name: "Phantom",
  params: {
    scale: 0.68,
    rotation: 1.8,
    speed: 1.25,
    frame: 0,
    color1: "hsla(242.2, 44.3%, 12%, 1)",
    color2: "hsla(236.1, 80.4%, 70%, 1)",
    color3: "hsla(0, 0%, 100%, 1)",
    proportion: 0.45,
    softness: 1,
    distortion: 0.16,
    swirl: 0.3,
    swirlIterations: 7,
    shapeScale: 0.1,
    shape: PatternShapes.Checks
  }
};
var presetAbyss = {
  name: "The Abyss",
  params: {
    scale: 0.1,
    rotation: 2,
    speed: 0.06,
    frame: 0,
    color1: "hsla(242.2, 44.3%, 12%, 1)",
    color2: "hsla(236.1, 80.4%, 70%, 1)",
    color3: "hsla(0, 0%, 100%, 1)",
    proportion: 0,
    softness: 1,
    distortion: 0.09,
    swirl: 0.48,
    swirlIterations: 4,
    shapeScale: 0.1,
    shape: PatternShapes.Edge
  }
};
var presetInk = {
  name: "Live Ink",
  params: {
    scale: 0.7,
    rotation: 1.5,
    speed: 0.25,
    frame: 0,
    color1: "hsla(210, 11.1%, 7.1%, 1)",
    color2: "hsla(165, 9%, 65.1%, 1)",
    color3: "hsla(84, 100%, 97.1%, 1)",
    proportion: 0.35,
    softness: 0,
    distortion: 0.25,
    swirl: 0.8,
    swirlIterations: 10,
    shapeScale: 0.26,
    shape: PatternShapes.Checks
  }
};
var presetIceberg = {
  name: "Iceberg",
  params: {
    scale: 1.1,
    rotation: 2,
    speed: 0.05,
    frame: 0,
    color1: "hsla(0, 0%, 100%, 1)",
    color2: "hsla(220, 38.7%, 32%, 1)",
    color3: "hsla(129.2, 41.9%, 6.1%, 1)",
    proportion: 0.3,
    softness: 1,
    distortion: 0.2,
    swirl: 0.86,
    swirlIterations: 7,
    shapeScale: 0,
    shape: PatternShapes.Checks
  }
};
var presetNectar = {
  name: "Nectar",
  params: {
    scale: 0.24,
    rotation: 0,
    speed: 0.42,
    frame: 0,
    color1: "hsla(37.5, 22.2%, 7.1%, 1)",
    color2: "hsla(38.5, 59.1%, 63.1%, 1)",
    color3: "hsla(37.6, 30%, 95.2%, 1)",
    proportion: 0.24,
    softness: 1,
    distortion: 0.21,
    swirl: 0.57,
    swirlIterations: 10,
    shapeScale: 0.32,
    shape: PatternShapes.Edge
  }
};
var presetFilteredLight = {
  name: "Filtered Light",
  params: {
    scale: 2,
    rotation: 0.44,
    speed: 0.32,
    frame: 0,
    color1: "hsla(60.2, 7.8%, 8.3%, 1)",
    color2: "hsla(64.4, 27.8%, 81%, 1)",
    color3: "hsla(60, 100%, 93.9%, 1)",
    proportion: 0.25,
    softness: 1,
    distortion: 0.06,
    swirl: 0,
    swirlIterations: 0,
    shapeScale: 0,
    shape: PatternShapes.Stripes
  }
};
var presetKelp = {
  name: "Kelp",
  params: {
    scale: 0.38,
    rotation: 0.6,
    speed: 2,
    frame: 0,
    color1: "hsla(79.3, 100%, 78%, 1)",
    color2: "hsla(112, 10.5%, 28%, 1)",
    color3: "hsla(203.3, 50%, 7.1%, 1)",
    proportion: 1,
    softness: 0,
    distortion: 0,
    swirl: 0.15,
    swirlIterations: 0,
    shapeScale: 0.74,
    shape: PatternShapes.Stripes
  }
};
var warpPresets = [
  defaultPreset11,
  presetAbyss,
  presetCauldron,
  presetFilteredLight,
  presetIceberg,
  presetInk,
  presetKelp,
  presetNectar,
  presetPassion,
  presetPhantom,
  presetSilk
];
var Warp = ({
  scale,
  rotation,
  color1,
  color2,
  color3,
  proportion,
  softness,
  distortion,
  swirl,
  swirlIterations,
  shapeScale,
  shape,
  ...props
}) => {
  const uniforms = (0, import_react12.useMemo)(() => {
    return {
      u_scale: scale ?? defaultPreset11.params.scale,
      u_rotation: rotation ?? defaultPreset11.params.rotation,
      u_color1: getShaderColorFromString(color1, defaultPreset11.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset11.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset11.params.color2),
      u_proportion: proportion ?? defaultPreset11.params.proportion,
      u_softness: softness ?? defaultPreset11.params.softness,
      u_distortion: distortion ?? defaultPreset11.params.distortion,
      u_swirl: swirl ?? defaultPreset11.params.swirl,
      u_swirlIterations: swirlIterations ?? defaultPreset11.params.swirlIterations,
      u_shapeScale: shapeScale ?? defaultPreset11.params.shapeScale,
      u_shape: shape ?? defaultPreset11.params.shape
    };
  }, [
    scale,
    rotation,
    color1,
    color2,
    color3,
    proportion,
    softness,
    distortion,
    swirl,
    swirlIterations,
    shapeScale,
    shape
  ]);
  return (0, import_jsx_runtime12.jsx)(ShaderMount2, { ...props, fragmentShader: warpFragmentShader, uniforms });
};
var defaultPreset12 = {
  name: "Default",
  params: {
    colorBack: "hsla(215, 100%, 11%, 1)",
    color1: "hsla(45, 100%, 70%, 1)",
    color2: "hsla(10, 100%, 80%, 1)",
    color3: "hsla(178, 100%, 83%, 1)",
    offsetX: -0.6,
    offsetY: -0.6,
    frequency: 6,
    spotty: 0.28,
    midIntensity: 0.97,
    midSize: 2,
    density: 0.3,
    blending: 0,
    speed: 1,
    frame: 0
  }
};
var auroraPreset = {
  name: "Aurora",
  params: {
    colorBack: "hsla(0, 0%, 25%, 1)",
    color1: "hsla(239, 100%, 70%, 1)",
    color2: "hsla(150, 100%, 70%, 1)",
    color3: "hsla(200, 100%, 70%, 1)",
    offsetX: 0,
    offsetY: 1,
    frequency: 2.4,
    spotty: 0.9,
    midIntensity: 0.8,
    midSize: 2.1,
    density: 0.5,
    blending: 1,
    speed: 0.5,
    frame: 0
  }
};
var warpPreset = {
  name: "Warp",
  params: {
    colorBack: "hsla(0, 0%, 0%, 1)",
    color1: "hsla(317, 100%, 50%, 1)",
    color2: "hsla(25, 100%, 50%, 1)",
    color3: "hsla(0, 0%, 100%, 1)",
    offsetX: 0,
    offsetY: 0,
    frequency: 1.2,
    spotty: 0.15,
    midIntensity: 0,
    midSize: 0,
    density: 0.79,
    blending: 0.4,
    speed: 2,
    frame: 0
  }
};
var linearPreset = {
  name: "Linear",
  params: {
    colorBack: "hsla(0, 0%, 0%, 1)",
    color1: "hsl(0 0% 100% / 12%)",
    color2: "hsl(0 0% 100% / 24%)",
    color3: "hsl(0 0% 100% / 16%)",
    offsetX: 0.2,
    offsetY: -0.7,
    frequency: 1.2,
    spotty: 0.25,
    midSize: 1.1,
    midIntensity: 0.75,
    density: 0.79,
    blending: 1,
    speed: 0.5,
    frame: 0
  }
};
var etherPreset = {
  name: "Ether",
  params: {
    colorBack: "hsl(226.7 50% 7.1% / 100%)",
    color1: "hsl(215 100% 53.9% / 65.1%)",
    color2: "hsl(214.4 85.9% 86.1% / 74.9%)",
    color3: "hsl(225 31.4% 20% / 100%)",
    offsetX: -0.6,
    offsetY: 0,
    frequency: 0.3,
    spotty: 0.77,
    midSize: 1.1,
    midIntensity: 0.5,
    density: 0.6,
    blending: 0.6,
    speed: 1,
    frame: 0
  }
};
var godRaysPresets = [defaultPreset12, auroraPreset, warpPreset, linearPreset, etherPreset];
var GodRays = ({
  colorBack,
  color1,
  color2,
  color3,
  offsetX,
  offsetY,
  frequency,
  spotty,
  midIntensity,
  midSize,
  density,
  blending,
  ...props
}) => {
  const uniforms = (0, import_react13.useMemo)(() => {
    return {
      u_colorBack: getShaderColorFromString(colorBack, defaultPreset12.params.colorBack),
      u_color1: getShaderColorFromString(color1, defaultPreset12.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset12.params.color2),
      u_color3: getShaderColorFromString(color3, defaultPreset12.params.color3),
      u_offsetX: offsetX ?? defaultPreset12.params.offsetX,
      u_offsetY: offsetY ?? defaultPreset12.params.offsetY,
      u_frequency: frequency ?? defaultPreset12.params.frequency,
      u_spotty: spotty ?? defaultPreset12.params.spotty,
      u_midIntensity: midIntensity ?? defaultPreset12.params.midIntensity,
      u_midSize: midSize ?? defaultPreset12.params.midSize,
      u_density: density ?? defaultPreset12.params.density,
      u_blending: blending ?? defaultPreset12.params.blending
    };
  }, [
    colorBack,
    color1,
    color2,
    color3,
    offsetX,
    offsetY,
    frequency,
    spotty,
    midIntensity,
    midSize,
    density,
    blending
  ]);
  return (0, import_jsx_runtime13.jsx)(ShaderMount2, { ...props, fragmentShader: godRaysFragmentShader, uniforms });
};
var defaultPreset13 = {
  name: "Default",
  params: {
    color1: "hsla(0, 0%, 98%, 1)",
    color2: "hsla(0, 0%, 50%, 1)",
    scale: 1,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0,
    spiralDistortion: 0,
    strokeWidth: 0.5,
    strokeTaper: 0,
    strokeCap: 0,
    noiseFreq: 0,
    noisePower: 0,
    softness: 0.01,
    speed: 1,
    frame: 0
  }
};
var noisyPreset = {
  name: "Noisy",
  params: {
    color1: "hsla(87, 77%, 53%, 1)",
    color2: "hsla(109, 70%, 31%, 1)",
    scale: 1.3,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0.5,
    spiralDistortion: 0,
    strokeWidth: 0.5,
    strokeTaper: 0,
    strokeCap: 0.5,
    noiseFreq: 0.1,
    noisePower: 1,
    softness: 0,
    speed: 1,
    frame: 0
  }
};
var dropletPreset = {
  name: "Droplet",
  params: {
    color1: "hsla(320, 50%, 50%, 1)",
    color2: "hsla(190, 50%, 95%, 1)",
    scale: 0.65,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0,
    spiralDistortion: 0,
    strokeWidth: 0.05,
    strokeTaper: 0,
    strokeCap: 1,
    noiseFreq: 0,
    noisePower: 0,
    softness: 0,
    speed: 1,
    frame: 0
  }
};
var sandPreset = {
  name: "Sand",
  params: {
    color1: "hsla(45, 25%, 50%, 1)",
    color2: "hsla(0, 0%, 87%, 1)",
    scale: 3,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0,
    spiralDistortion: 0,
    strokeWidth: 0.15,
    strokeTaper: 0,
    strokeCap: 0,
    noiseFreq: 30,
    noisePower: 1,
    softness: 0.2,
    speed: 0,
    frame: 0
  }
};
var swirlPreset = {
  name: "Swirl",
  params: {
    color1: "hsla(160, 50%, 80%, 1)",
    color2: "hsla(220, 50%, 20%, 1)",
    scale: 4,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0.8,
    spiralDistortion: 0,
    strokeWidth: 0.5,
    strokeTaper: 0,
    strokeCap: 0,
    noiseFreq: 0,
    noisePower: 0,
    softness: 0.5,
    speed: 1,
    frame: 0
  }
};
var hookPreset = {
  name: "Hook",
  params: {
    color1: "hsla(0, 0%, 0%, 1)",
    color2: "hsla(200, 50%, 70%, 1)",
    scale: 0.8,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0,
    spiralDistortion: 0,
    strokeWidth: 0.5,
    strokeTaper: 0.5,
    strokeCap: 0,
    noiseFreq: 0,
    noisePower: 0,
    softness: 0.02,
    speed: 3,
    frame: 0
  }
};
var vinylPreset = {
  name: "Vinyl",
  params: {
    color1: "hsla(0, 0%, 15%, 1)",
    color2: "hsla(320, 5%, 75%, 1)",
    scale: 1,
    offsetX: 0,
    offsetY: 0,
    spiralDensity: 0,
    spiralDistortion: 0.3,
    strokeWidth: 0.95,
    strokeTaper: 0,
    strokeCap: 1,
    noiseFreq: 0,
    noisePower: 0,
    softness: 0.11,
    speed: 1,
    frame: 0
  }
};
var spiralPresets = [
  defaultPreset13,
  noisyPreset,
  dropletPreset,
  swirlPreset,
  sandPreset,
  hookPreset,
  vinylPreset
];
var Spiral = ({
  color1,
  color2,
  scale,
  offsetX,
  offsetY,
  spiralDensity,
  spiralDistortion,
  strokeWidth,
  strokeTaper,
  strokeCap,
  noiseFreq,
  noisePower,
  softness,
  ...props
}) => {
  const uniforms = (0, import_react14.useMemo)(() => {
    return {
      u_color1: getShaderColorFromString(color1, defaultPreset13.params.color1),
      u_color2: getShaderColorFromString(color2, defaultPreset13.params.color2),
      u_scale: scale ?? defaultPreset13.params.scale,
      u_offsetX: offsetX ?? defaultPreset13.params.offsetX,
      u_offsetY: offsetY ?? defaultPreset13.params.offsetY,
      u_spiralDensity: spiralDensity ?? defaultPreset13.params.spiralDensity,
      u_spiralDistortion: spiralDistortion ?? defaultPreset13.params.spiralDistortion,
      u_strokeWidth: strokeWidth ?? defaultPreset13.params.strokeWidth,
      u_strokeTaper: strokeTaper ?? defaultPreset13.params.strokeTaper,
      u_strokeCap: strokeCap ?? defaultPreset13.params.strokeCap,
      u_noiseFreq: noiseFreq ?? defaultPreset13.params.noiseFreq,
      u_noisePower: noisePower ?? defaultPreset13.params.noisePower,
      u_softness: softness ?? defaultPreset13.params.softness
    };
  }, [
    color1,
    color2,
    scale,
    offsetX,
    offsetY,
    spiralDensity,
    spiralDistortion,
    strokeWidth,
    strokeTaper,
    strokeCap,
    noiseFreq,
    noisePower,
    softness
  ]);
  return (0, import_jsx_runtime14.jsx)(ShaderMount2, { ...props, fragmentShader: spiralFragmentShader, uniforms });
};
export {
  DotGrid,
  DotGridShapes,
  DotOrbit,
  GodRays,
  MeshGradient,
  Metaballs,
  NeuroNoise,
  PatternShapes,
  PerlinNoise,
  ShaderMount2 as ShaderMount,
  SmokeRing,
  Spiral,
  SteppedSimplexNoise,
  Voronoi,
  Warp,
  Waves,
  dotGridPresets,
  dotOrbitPresets,
  getShaderColorFromString,
  godRaysPresets,
  meshGradientPresets,
  metaballsPresets,
  neuroNoisePresets,
  perlinNoisePresets,
  smokeRingPresets,
  spiralPresets,
  steppedSimplexNoisePresets,
  voronoiPresets,
  warpPresets,
  wavesPresets
};
//# sourceMappingURL=@paper-design_shaders-react.js.map
