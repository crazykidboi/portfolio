import { type GlobalParams, type ShaderMountProps } from '../shader-mount';
import { type PatternShape } from '@paper-design/shaders';
export type WarpParams = {
    scale?: number;
    rotation?: number;
    color1?: string;
    color2?: string;
    color3?: string;
    proportion?: number;
    softness?: number;
    distortion?: number;
    swirl?: number;
    swirlIterations?: number;
    shapeScale?: number;
    shape?: PatternShape;
} & GlobalParams;
export type WarpProps = Omit<ShaderMountProps, 'fragmentShader'> & WarpParams;
type WarpPreset = {
    name: string;
    params: Required<WarpParams>;
    style?: React.CSSProperties;
};
export declare const defaultPreset: WarpPreset;
export declare const presetCauldron: WarpPreset;
export declare const presetSilk: WarpPreset;
export declare const presetPassion: WarpPreset;
export declare const presetPhantom: WarpPreset;
export declare const presetAbyss: WarpPreset;
export declare const presetInk: WarpPreset;
export declare const presetIceberg: WarpPreset;
export declare const presetNectar: WarpPreset;
export declare const presetFilteredLight: WarpPreset;
export declare const presetKelp: WarpPreset;
export declare const warpPresets: WarpPreset[];
export declare const Warp: ({ scale, rotation, color1, color2, color3, proportion, softness, distortion, swirl, swirlIterations, shapeScale, shape, ...props }: WarpProps) => React.ReactElement;
export {};
