/** Possible values for the shape uniform */
export declare const DotGridShapes: {
    readonly Circle: 0;
    readonly Diamond: 1;
    readonly Square: 2;
    readonly Triangle: 3;
};
export type DotGridShape = (typeof DotGridShapes)[keyof typeof DotGridShapes];
export type DotGridUniforms = {
    u_colorFill: [number, number, number, number];
    u_colorStroke: [number, number, number, number];
    u_dotSize: number;
    u_gridSpacingX: number;
    u_gridSpacingY: number;
    u_strokeWidth: number;
    u_sizeRange: number;
    u_opacityRange: number;
    u_shape: DotGridShape;
};
/**
 * Dot Grid Pattern
 * (the size parameters are set in pixels)
 *
 * Uniforms include:
 * u_colorBack - the background color
 * u_colorFill - the fill color
 * u_colorStroke - the stroke color
 * u_dotSize (px) - the base dot radius
 * u_strokeWidth (px) - the stroke (to be subtracted from u_dotSize)
 * u_gridSpacingX (px) - horizontal grid spacing
 * u_gridSpacingY (px) - xertical grid spacing
 * u_sizeRange (0 .. 1) - variety of dot size
 * u_opacityRange(0 .. 1) - variety of dot opacity to be applied equally to fill and stroke
 * u_shape - shape code (0 - circle, 1 - diamond, 2 - square, 3 - triangle)
 */
export declare const dotGridFragmentShader = "#version 300 es\nprecision highp float;\n\nuniform vec2 u_resolution;\nuniform float u_pixelRatio;\n\nuniform vec4 u_colorFill;\nuniform vec4 u_colorStroke;\nuniform float u_dotSize;\nuniform float u_gridSpacingX;\nuniform float u_gridSpacingY;\nuniform float u_strokeWidth;\nuniform float u_sizeRange;\nuniform float u_opacityRange;\nuniform float u_shape;\n\nout vec4 fragColor;\n\n#define TWO_PI 6.28318530718\n#define PI 3.14159265358979323846\n\nfloat hash(vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n    -0.577350269189626, 0.024390243902439);\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0));\n  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),\n      dot(x12.zw, x12.zw)), 0.0);\n  m = m * m;\n  m = m * m;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\nfloat polygon(vec2 p, float N, float rot) {\n  float a = atan(p.x, p.y) + rot;\n  float r = TWO_PI / float(N);\n\n  return cos(floor(.5 + a / r) * r - a) * length(p);\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy;\n  uv.y = u_resolution.y - uv.y;\n\n  uv /= u_pixelRatio;\n\n  vec2 grid = fract(uv / vec2(u_gridSpacingX, u_gridSpacingY)) + 1e-4;\n  vec2 grid_idx = floor(uv / vec2(u_gridSpacingX, u_gridSpacingY));\n  float sizeRandomizer = .5 + .8 * snoise(2. * vec2(grid_idx.x * 100., grid_idx.y));\n  float opacity_randomizer = .5 + .7 * snoise(2. * vec2(grid_idx.y, grid_idx.x));\n\n  vec2 center = vec2(0.5) - 1e-3;\n  vec2 p = (grid - center) * vec2(u_gridSpacingX, u_gridSpacingY);\n\n  float baseSize = u_dotSize * (1. - sizeRandomizer * u_sizeRange);\n  float strokeWidth = u_strokeWidth;\n\n  float dist;\n  if (u_shape < 0.5) {\n    // Circle\n    dist = length(p);\n  } else if (u_shape < 1.5) {\n    // Diamond\n    strokeWidth *= 1.5;\n    dist = polygon(1.5 * p, 4., .25 * PI);\n  } else if (u_shape < 2.5) {\n    // Square\n    dist = polygon(1.03 * p, 4., 1e-3);\n  } else {\n    // Triangle\n    strokeWidth *= 1.5;\n    p = p * 2. - 1.;\n    p *= .9;\n    p.y -= .75 * baseSize;\n    dist = polygon(p, 3., 1e-3);\n  }\n\n  float edgeWidth = fwidth(dist);\n  float shapeOuter = smoothstep(baseSize + edgeWidth + strokeWidth, baseSize - edgeWidth + strokeWidth, dist);\n  float shapeInner = smoothstep(baseSize + edgeWidth, baseSize - edgeWidth, dist);\n  float stroke = clamp(shapeOuter - shapeInner, 0., 1.);\n\n  float dot_opacity = max(0., 1. - opacity_randomizer * u_opacityRange);\n\n  vec3 color = u_colorFill.rgb * u_colorFill.a * dot_opacity * shapeInner;\n  color = mix(color, u_colorStroke.rgb, u_colorStroke.a * dot_opacity * stroke);\n\n  float opacity = u_colorFill.a * shapeInner * dot_opacity;\n  opacity += u_colorStroke.a * stroke * dot_opacity;\n\n  fragColor = vec4(color, opacity);\n}\n";
