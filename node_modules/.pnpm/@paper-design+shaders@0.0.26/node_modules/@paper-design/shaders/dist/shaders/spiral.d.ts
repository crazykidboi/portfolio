export type SpiralUniforms = {
    u_color1: [number, number, number, number];
    u_color2: [number, number, number, number];
    u_scale: number;
    u_offsetX: number;
    u_offsetY: number;
    u_spiralDensity: number;
    u_spiralDistortion: number;
    u_strokeWidth: number;
    u_strokeTaper: number;
    u_strokeCap: number;
    u_noiseFreq: number;
    u_noisePower: number;
    u_softness: number;
};
/**
 * Spiral shape
 * The artwork by Ksenia Kondrashova
 * Generates a dynamic spiral shape with configurable parameters
 *
 * Uniforms include:
 *
 * u_scale - controls the overall scale of the spiral (u_scale = 1 makes it fit the viewport height)
 * u_offsetX - left / right pan
 * u_offsetY - up / down pan
 * u_color1 - the first color used in the spiral (stroke)
 * u_color2 - the second color used in the spiral (back)
 * u_spiralDensity (0 .. 1) - the spacing of the spiral arms
 * u_spiralDistortion (0 .. 1) - adds a wavy distortion effect to the spiral arms
 * u_strokeWidth (0 .. 1) - defines the thickness of the spiral lines.
 * u_strokeCap (0 .. 1) - adjusts the fading of the spiral edges.
 * u_strokeTaper (0 .. 1) - controls the tapering effect along the spiral arms.
 * u_noiseFreq - frequency of the noise applied to the spiral.
 * u_noisePower (0 .. 1) - strength of the noise effect.
 * u_softness - softens the edges of the spiral for a smoother appearance.
 */
export declare const spiralFragmentShader = "#version 300 es\nprecision highp float;\n\nuniform float u_scale;\nuniform float u_offsetX;\nuniform float u_offsetY;\n\nuniform vec4 u_color1;\nuniform vec4 u_color2;\nuniform float u_spiralDensity;\nuniform float u_spiralDistortion;\nuniform float u_strokeWidth;\nuniform float u_strokeCap;\nuniform float u_strokeTaper;\n\nuniform float u_noiseFreq;\nuniform float u_noisePower;\nuniform float u_softness;\n\nuniform float u_time;\nuniform float u_pixelRatio;\nuniform vec2 u_resolution;\n\n#define TWO_PI 6.28318530718\n#define PI 3.14159265358979323846\n\nout vec4 fragColor;\n\nvec3 permute(vec3 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n    -0.577350269189626, 0.024390243902439);\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0));\n  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),\n      dot(x12.zw, x12.zw)), 0.0);\n  m = m * m;\n  m = m * m;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / u_resolution.xy;\n  float ratio = u_resolution.x / u_resolution.y;\n\n  uv -= .5;\n  uv += vec2(-u_offsetX, u_offsetY);\n\n  uv *= (.4 + 15. * u_scale);\n  uv.x *= ratio;\n\n  float t = u_time;\n\n  float l = length(uv);\n  float angle = atan(uv.y, uv.x) - 2. * t;\n  float angle_norm = angle / TWO_PI;  \n\n  angle_norm += .125 * u_noisePower * snoise(.5 * u_noiseFreq * uv);\n\n  float offset = pow(l, 1. - clamp(u_spiralDensity, 0., 1.)) + angle_norm;\n  \n  float stripe_map = fract(offset);\n  stripe_map -= .5 * u_strokeTaper * l;\n  \n  stripe_map += .25 * u_noisePower * snoise(u_noiseFreq * uv);\n\n  float shape = 2. * abs(stripe_map - .5);\n  \n  shape *= (1. + u_spiralDistortion * sin(4. * l - t) * cos(PI + l + t));\n    \n  float stroke_width = clamp(u_strokeWidth, fwidth(l), 1. - fwidth(l));\n\n  float edge_width = min(fwidth(l), fwidth(offset));\n\n  float mid = 1. - smoothstep(.0, .9, l);\n  mid = pow(mid, 2.);\n  shape -= .5 * u_strokeCap * mid;\n  \n  shape = smoothstep(stroke_width - edge_width - u_softness, stroke_width + edge_width + u_softness, shape);\n\n  vec3 color = mix(u_color1.rgb * u_color1.a, u_color2.rgb * u_color2.a, shape);\n  float opacity = mix(u_color1.a, u_color2.a, shape);\n\n  fragColor = vec4(color, opacity);\n}\n";
